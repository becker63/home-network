apiVersion: mock.crossplane.io/v1alpha1
kind: XNop
metadata:
  name: test-cleanup-xnop
  namespace: default
  annotations:
    crossplane.io/composition-resource-name: test-cleanup-pipeline
spec:
  forProvider:
    conditionAfter:
    - time: '1s'
      conditionType: Ready
      conditionStatus: 'True'
---
apiVersion: pkg.crossplane.io/v1
kind: Function
metadata:
  name: python-function
spec:
  ignoreCrossplaneConstraints: false
  package: xpkg.upbound.io/upbound/function-python
  packagePullPolicy: IfNotPresent
  revisionActivationPolicy: Automatic
  revisionHistoryLimit: 1
  runtimeConfigRef:
    apiVersion: pkg.crossplane.io/v1beta1
    kind: DeploymentRuntimeConfig
    name: default
  skipDependencyResolution: false
---
apiVersion: python.fn.crossplane.io/v1beta1
kind: Script
metadata:
  name: test-cleanup-script
  namespace: default
script: |
  from crossplane.function.proto.v1 import run_function_pb2 as fnv1

  def compose(req: fnv1.RunFunctionRequest, rsp: fnv1.RunFunctionResponse):
      # Look for the launch-instance resource in observed state
      instance = req.observed.resources.get("launch-instance")
      if instance and instance.resource:
          conditions = instance.resource.fields.get("status", {}).get("conditions", {}).get("fields", {})
          for cond in conditions.values():
              if (
                  cond.get("fields", {}).get("type", {}).get("string_value") == "Ready" and
                  cond.get("fields", {}).get("status", {}).get("string_value") == "True"
              ):
                  rsp.desired.resources.pop("upload-image", None)
                  break
---
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: test-cleanup-pipeline
spec:
  compositeTypeRef:
    apiVersion: mock.crossplane.io/v1alpha1
    kind: XNop
  mode: Pipeline
  pipeline:
  - functionRef:
      name: patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
      metadata:
        name: mock-input
      resources:
      - base:
          apiVersion: mock.crossplane.io/v1
          kind: UploadImage
        name: upload-image
        readinessChecks:
        - matchCondition:
            status: 'True'
            type: Ready
          type: MatchCondition
      - base:
          apiVersion: nop.crossplane.io/v1alpha1
          kind: NopResource
          spec:
            forProvider:
              conditionAfter:
              - time: '3s'
                conditionType: Ready
                conditionStatus: 'True'
        name: launch-instance
        readinessChecks:
        - matchCondition:
            status: 'True'
            type: Ready
          type: MatchCondition
    step: mock
  - functionRef:
      name: sequencer
    input:
      apiVersion: sequencer.fn.crossplane.io/v1beta1
      kind: Input
      metadata:
        name: mock-seq
      rules:
      - sequence:
        - upload-image
        - launch-instance
    step: sequence
  - functionRef:
      name: python-function
    input:
      apiVersion: python.fn.crossplane.io/v1beta1
      kind: Script
      metadata:
        name: test-cleanup-script
        namespace: default
      script: |
        from crossplane.function.proto.v1 import run_function_pb2 as fnv1

        def compose(req: fnv1.RunFunctionRequest, rsp: fnv1.RunFunctionResponse):
            # Look for the launch-instance resource in observed state
            instance = req.observed.resources.get("launch-instance")
            if instance and instance.resource:
                conditions = instance.resource.fields.get("status", {}).get("conditions", {}).get("fields", {})
                for cond in conditions.values():
                    if (
                        cond.get("fields", {}).get("type", {}).get("string_value") == "Ready" and
                        cond.get("fields", {}).get("status", {}).get("string_value") == "True"
                    ):
                        rsp.desired.resources.pop("upload-image", None)
                        break
    step: cleanup
