"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Resources:
    r"""
    Resources specifies Patch & Transform resource templates.

    Attributes
    ----------
    apiVersion : str, default is "pt.fn.crossplane.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    environment : PtFnCrossplaneIoV1beta1ResourcesEnvironment, default is Undefined, optional
        environment
    kind : str, default is "Resources", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    patchSets : [PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0], default is Undefined, optional
        PatchSets define a named set of patches that may be included by any
        resource. PatchSets cannot themselves refer to other PatchSets.
    resources : [PtFnCrossplaneIoV1beta1ResourcesResourcesItems0], default is Undefined, required
        Resources is a list of resource templates that will be used when a
        composite resource is created.
    """


    apiVersion: "pt.fn.crossplane.io/v1beta1" = "pt.fn.crossplane.io/v1beta1"

    environment?: PtFnCrossplaneIoV1beta1ResourcesEnvironment

    kind: "Resources" = "Resources"

    metadata?: v1.ObjectMeta

    patchSets?: [PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0]

    resources: [PtFnCrossplaneIoV1beta1ResourcesResourcesItems0]


schema PtFnCrossplaneIoV1beta1ResourcesEnvironment:
    r"""
    Environment represents the Composition environment.

    THIS IS AN ALPHA FIELD.
    Do not use it in production. It may be changed or removed without notice.

    Attributes
    ----------
    patches : [PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0], default is Undefined, optional
        Patches is a list of environment patches that are executed before a
        composition's resources are composed. These patches are between the XR
        and the Environment. Either from the Environment to the XR, or vice
        versa.
    """


    patches?: [PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0]


schema PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0:
    r"""
    EnvironmentPatch objects are applied between the composite resource and
    the environment. Their behaviour depends on the Type selected. The default
    Type, FromCompositeFieldPath, copies a value from the composite resource
    to the environment, applying any defined transformers.

    Attributes
    ----------
    combine : PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0Combine, default is Undefined, optional
        combine
    fromFieldPath : str, default is Undefined, optional
        FromFieldPath is the path of the field on the resource whose value is
        to be used as input. Required when type is FromCompositeFieldPath or
        ToCompositeFieldPath.
    policy : PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0Policy, default is Undefined, optional
        policy
    toFieldPath : str, default is Undefined, optional
        ToFieldPath is the path of the field on the resource whose value will
        be changed with the result of transforms. Leave empty if you'd like to
        propagate to the same path as fromFieldPath.
    transforms : [PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0TransformsItems0], default is Undefined, optional
        Transforms are the list of functions that are used as a FIFO pipe for the
        input to be transformed.
    $type : str, default is "FromCompositeFieldPath", optional
        Type sets the patching behaviour to be used. Each patch type may require
        its own fields to be set on the Patch object.
    """


    combine?: PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0Combine

    fromFieldPath?: str

    policy?: PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0Policy

    toFieldPath?: str

    transforms?: [PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0TransformsItems0]

    $type?: "FromCompositeFieldPath" | "ToCompositeFieldPath" | "CombineFromComposite" | "CombineToComposite" | "FromEnvironmentFieldPath" | "ToEnvironmentFieldPath" = "FromCompositeFieldPath"


schema PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0Combine:
    r"""
    Combine is the patch configuration for a CombineFromComposite,
    CombineToComposite patch.

    Attributes
    ----------
    strategy : str, default is Undefined, required
        Strategy defines the strategy to use to combine the input variable values.
        Currently only string is supported.
    string : PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0CombineString, default is Undefined, optional
        string
    variables : [PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0CombineVariablesItems0], default is Undefined, required
        Variables are the list of variables whose values will be retrieved and
        combined.
    """


    strategy: "string"

    string?: PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0CombineString

    variables: [PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0CombineVariablesItems0]


    check:
        len(variables) >= 1


schema PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0CombineString:
    r"""
    String declares that input variables should be combined into a single
    string, using the relevant settings for formatting purposes.

    Attributes
    ----------
    fmt : str, default is Undefined, required
        Format the input using a Go format string. See
        https://golang.org/pkg/fmt/ for details.
    """


    fmt: str


schema PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0CombineVariablesItems0:
    r"""
    A CombineVariable defines the source of a value that is combined with
    others to form and patch an output value. Currently, this only supports
    retrieving values from a field path.

    Attributes
    ----------
    fromFieldPath : str, default is Undefined, required
        FromFieldPath is the path of the field on the source whose value is
        to be used as input.
    """


    fromFieldPath: str


schema PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0Policy:
    r"""
    Policy configures the specifics of patching behaviour.

    Attributes
    ----------
    fromFieldPath : str, default is Undefined, optional
        FromFieldPath specifies how to patch from a field path. The default is
        'Optional', which means the patch will be a no-op if the specified
        fromFieldPath does not exist. Use 'Required' to prevent the creation of a
        new composed resource until the required path exists.
    toFieldPath : str, default is Undefined, optional
        ToFieldPath specifies how to patch to a field path. The default is
        'Replace', which means the patch will completely replace the target field,
        or create it if it does not exist. Use 'MergeObjects' to recursively merge the patch
        object with the target object, while keeping target object keys, but overwriting any array values, or use
        'MergeObjectsAppendArrays' to recursively merge the patch object with the target object, while keeping
        target object keys and appending any array values to target array values, or use
        'ForceMergeObjects' to recursively merge the patch object with the target object, overwriting
        any target object keys, including array values, or use
        'ForceMergeObjectsAppendArrays' to recursively merge the patch object with the target object,
        overwriting target object keys, and appending any array values to target array values.
        'MergeObject' is deprecated, use 'MergeObjects' instead, which is functionally identical.
        'AppendArray' is deprecated, use 'ForceMergeObjectsAppendArrays' instead, which is functionally identical.
    """


    fromFieldPath?: "Optional" | "Required"

    toFieldPath?: "Replace" | "MergeObjects" | "MergeObjectsAppendArrays" | "ForceMergeObjects" | "ForceMergeObjectsAppendArrays" | "MergeObject" | "AppendArray"


schema PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0TransformsItems0:
    r"""
    Transform is a unit of process whose input is transformed into an output with
    the supplied configuration.

    Attributes
    ----------
    convert : PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0TransformsItems0Convert, default is Undefined, optional
        convert
    $map : {str:any}, default is Undefined, optional
        Map uses the input as a key in the given map and returns the value.
    match : PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0TransformsItems0Match, default is Undefined, optional
        match
    math : PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0TransformsItems0Math, default is Undefined, optional
        math
    string : PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0TransformsItems0String, default is Undefined, optional
        string
    $type : str, default is Undefined, required
        Type of the transform to be run.
    """


    convert?: PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0TransformsItems0Convert

    $map?: {str:any}

    match?: PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0TransformsItems0Match

    math?: PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0TransformsItems0Math

    string?: PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0TransformsItems0String

    $type: "map" | "match" | "math" | "string" | "convert"


schema PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0TransformsItems0Convert:
    r"""
    Convert is used to cast the input into the given output type.

    Attributes
    ----------
    format : str, default is Undefined, optional
        The expected input format.

        * `quantity` - parses the input as a K8s [`resource.Quantity`](https://pkg.go.dev/k8s.io/apimachinery/pkg/api/resource#Quantity).
        Only used during `string -> float64` conversions.
        * `json` - parses the input as a JSON string.
        Only used during `string -> object` or `string -> list` conversions.

        If this property is null, the default conversion is applied.
    toType : str, default is Undefined, required
        ToType is the type of the output of this transform.
    """


    format?: "none" | "quantity" | "json"

    toType: "string" | "int" | "int64" | "bool" | "float64" | "object" | "array"


schema PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0TransformsItems0Match:
    r"""
    Match is a more complex version of Map that matches a list of patterns.

    Attributes
    ----------
    fallbackTo : str, default is "Value", optional
        Determines to what value the transform should fallback if no pattern matches.
    fallbackValue : any, default is Undefined, optional
        The fallback value that should be returned by the transform if now pattern
        matches.
    patterns : [PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0TransformsItems0MatchPatternsItems0], default is Undefined, optional
        The patterns that should be tested against the input string.
        Patterns are tested in order. The value of the first match is used as
        result of this transform.
    """


    fallbackTo?: "Value" | "Input" = "Value"

    fallbackValue?: any

    patterns?: [PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0TransformsItems0MatchPatternsItems0]


schema PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0TransformsItems0MatchPatternsItems0:
    r"""
    MatchTransformPattern is a transform that returns the value that matches a
    pattern.

    Attributes
    ----------
    literal : str, default is Undefined, optional
        Literal exactly matches the input string (case sensitive).
        Is required if `type` is `literal`.
    regexp : str, default is Undefined, optional
        Regexp to match against the input string.
        Is required if `type` is `regexp`.
    result : any, default is Undefined, required
        The value that is used as result of the transform if the pattern matches.
    $type : str, default is "literal", required
        Type specifies how the pattern matches the input.

        * `literal` - the pattern value has to exactly match (case sensitive) the
        input string. This is the default.

        * `regexp` - the pattern treated as a regular expression against
        which the input string is tested. Crossplane will throw an error if the
        key is not a valid regexp.
    """


    literal?: str

    regexp?: str

    result: any

    $type: "literal" | "regexp" = "literal"


schema PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0TransformsItems0Math:
    r"""
    Math is used to transform the input via mathematical operations such as
    multiplication.

    Attributes
    ----------
    clampMax : int, default is Undefined, optional
        ClampMax makes sure that the value is not bigger than the given value.
    clampMin : int, default is Undefined, optional
        ClampMin makes sure that the value is not smaller than the given value.
    multiply : int, default is Undefined, optional
        Multiply the value.
    $type : str, default is "Multiply", optional
        Type of the math transform to be run.
    """


    clampMax?: int

    clampMin?: int

    multiply?: int

    $type?: "Multiply" | "ClampMin" | "ClampMax" = "Multiply"


schema PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0TransformsItems0String:
    r"""
    String is used to transform the input into a string or a different kind
    of string. Note that the input does not necessarily need to be a string.

    Attributes
    ----------
    convert : str, default is Undefined, optional
        Optional conversion method to be specified.
        `ToUpper` and `ToLower` change the letter case of the input string.
        `ToBase64` and `FromBase64` perform a base64 conversion based on the input string.
        `ToJson` converts any input value into its raw JSON representation.
        `ToSha1`, `ToSha256` and `ToSha512` generate a hash value based on the input
        converted to JSON.
    fmt : str, default is Undefined, optional
        Format the input using a Go format string. See
        https://golang.org/pkg/fmt/ for details.
    join : PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0TransformsItems0StringJoin, default is Undefined, optional
        join
    regexp : PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0TransformsItems0StringRegexp, default is Undefined, optional
        regexp
    replace : PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0TransformsItems0StringReplace, default is Undefined, optional
        replace
    trim : str, default is Undefined, optional
        Trim the prefix or suffix from the input
    $type : str, default is "Format", required
        Type of the string transform to be run.
    """


    convert?: "ToUpper" | "ToLower" | "ToBase64" | "FromBase64" | "ToJson" | "ToSha1" | "ToSha256" | "ToSha512"

    fmt?: str

    join?: PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0TransformsItems0StringJoin

    regexp?: PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0TransformsItems0StringRegexp

    replace?: PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0TransformsItems0StringReplace

    trim?: str

    $type: "Format" | "Convert" | "TrimPrefix" | "TrimSuffix" | "Regexp" = "Format"


schema PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0TransformsItems0StringJoin:
    r"""
    Join the input strings.

    Attributes
    ----------
    separator : str, default is Undefined, required
        Separator to join the input strings.
    """


    separator: str


schema PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0TransformsItems0StringRegexp:
    r"""
    Extract a match from the input using a regular expression.

    Attributes
    ----------
    group : int, default is Undefined, optional
        Group number to match. 0 (the default) matches the entire expression.
    match : str, default is Undefined, required
        Match string. May optionally include submatches, aka capture groups.
        See https://pkg.go.dev/regexp/ for details.
    """


    group?: int

    match: str


schema PtFnCrossplaneIoV1beta1ResourcesEnvironmentPatchesItems0TransformsItems0StringReplace:
    r"""
    Search/Replace applied to the input string.

    Attributes
    ----------
    replace : str, default is Undefined, required
        The Replace string replaces all occurrences of the search string.
    search : str, default is Undefined, required
        The Search string to match.
    """


    replace: str

    search: str


schema PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0:
    r"""
    A PatchSet is a set of patches that can be reused from all resources.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of this PatchSet.
    patches : [PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0], default is Undefined, required
        Patches will be applied as an overlay to the base resource.
    """


    name: str

    patches: [PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0]


schema PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0:
    r"""
    PatchSetPatch defines a set of Patches that can be referenced by name by
    other patches of type PatchSet.

    Attributes
    ----------
    combine : PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0Combine, default is Undefined, optional
        combine
    fromFieldPath : str, default is Undefined, optional
        FromFieldPath is the path of the field on the resource whose value is
        to be used as input. Required when type is FromCompositeFieldPath or
        ToCompositeFieldPath.
    policy : PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0Policy, default is Undefined, optional
        policy
    toFieldPath : str, default is Undefined, optional
        ToFieldPath is the path of the field on the resource whose value will
        be changed with the result of transforms. Leave empty if you'd like to
        propagate to the same path as fromFieldPath.
    transforms : [PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0TransformsItems0], default is Undefined, optional
        Transforms are the list of functions that are used as a FIFO pipe for the
        input to be transformed.
    $type : str, default is "FromCompositeFieldPath", optional
        Type sets the patching behaviour to be used. Each patch type may require
        its own fields to be set on the ComposedPatch object.
    """


    combine?: PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0Combine

    fromFieldPath?: str

    policy?: PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0Policy

    toFieldPath?: str

    transforms?: [PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0TransformsItems0]

    $type?: "FromCompositeFieldPath" | "ToCompositeFieldPath" | "CombineFromComposite" | "CombineToComposite" | "FromEnvironmentFieldPath" | "ToEnvironmentFieldPath" | "CombineFromEnvironment" | "CombineToEnvironment" = "FromCompositeFieldPath"


schema PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0Combine:
    r"""
    Combine is the patch configuration for a CombineFromComposite,
    CombineToComposite patch.

    Attributes
    ----------
    strategy : str, default is Undefined, required
        Strategy defines the strategy to use to combine the input variable values.
        Currently only string is supported.
    string : PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0CombineString, default is Undefined, optional
        string
    variables : [PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0CombineVariablesItems0], default is Undefined, required
        Variables are the list of variables whose values will be retrieved and
        combined.
    """


    strategy: "string"

    string?: PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0CombineString

    variables: [PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0CombineVariablesItems0]


    check:
        len(variables) >= 1


schema PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0CombineString:
    r"""
    String declares that input variables should be combined into a single
    string, using the relevant settings for formatting purposes.

    Attributes
    ----------
    fmt : str, default is Undefined, required
        Format the input using a Go format string. See
        https://golang.org/pkg/fmt/ for details.
    """


    fmt: str


schema PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0CombineVariablesItems0:
    r"""
    A CombineVariable defines the source of a value that is combined with
    others to form and patch an output value. Currently, this only supports
    retrieving values from a field path.

    Attributes
    ----------
    fromFieldPath : str, default is Undefined, required
        FromFieldPath is the path of the field on the source whose value is
        to be used as input.
    """


    fromFieldPath: str


schema PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0Policy:
    r"""
    Policy configures the specifics of patching behaviour.

    Attributes
    ----------
    fromFieldPath : str, default is Undefined, optional
        FromFieldPath specifies how to patch from a field path. The default is
        'Optional', which means the patch will be a no-op if the specified
        fromFieldPath does not exist. Use 'Required' to prevent the creation of a
        new composed resource until the required path exists.
    toFieldPath : str, default is Undefined, optional
        ToFieldPath specifies how to patch to a field path. The default is
        'Replace', which means the patch will completely replace the target field,
        or create it if it does not exist. Use 'MergeObjects' to recursively merge the patch
        object with the target object, while keeping target object keys, but overwriting any array values, or use
        'MergeObjectsAppendArrays' to recursively merge the patch object with the target object, while keeping
        target object keys and appending any array values to target array values, or use
        'ForceMergeObjects' to recursively merge the patch object with the target object, overwriting
        any target object keys, including array values, or use
        'ForceMergeObjectsAppendArrays' to recursively merge the patch object with the target object,
        overwriting target object keys, and appending any array values to target array values.
        'MergeObject' is deprecated, use 'MergeObjects' instead, which is functionally identical.
        'AppendArray' is deprecated, use 'ForceMergeObjectsAppendArrays' instead, which is functionally identical.
    """


    fromFieldPath?: "Optional" | "Required"

    toFieldPath?: "Replace" | "MergeObjects" | "MergeObjectsAppendArrays" | "ForceMergeObjects" | "ForceMergeObjectsAppendArrays" | "MergeObject" | "AppendArray"


schema PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0TransformsItems0:
    r"""
    Transform is a unit of process whose input is transformed into an output with
    the supplied configuration.

    Attributes
    ----------
    convert : PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0TransformsItems0Convert, default is Undefined, optional
        convert
    $map : {str:any}, default is Undefined, optional
        Map uses the input as a key in the given map and returns the value.
    match : PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0TransformsItems0Match, default is Undefined, optional
        match
    math : PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0TransformsItems0Math, default is Undefined, optional
        math
    string : PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0TransformsItems0String, default is Undefined, optional
        string
    $type : str, default is Undefined, required
        Type of the transform to be run.
    """


    convert?: PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0TransformsItems0Convert

    $map?: {str:any}

    match?: PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0TransformsItems0Match

    math?: PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0TransformsItems0Math

    string?: PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0TransformsItems0String

    $type: "map" | "match" | "math" | "string" | "convert"


schema PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0TransformsItems0Convert:
    r"""
    Convert is used to cast the input into the given output type.

    Attributes
    ----------
    format : str, default is Undefined, optional
        The expected input format.

        * `quantity` - parses the input as a K8s [`resource.Quantity`](https://pkg.go.dev/k8s.io/apimachinery/pkg/api/resource#Quantity).
        Only used during `string -> float64` conversions.
        * `json` - parses the input as a JSON string.
        Only used during `string -> object` or `string -> list` conversions.

        If this property is null, the default conversion is applied.
    toType : str, default is Undefined, required
        ToType is the type of the output of this transform.
    """


    format?: "none" | "quantity" | "json"

    toType: "string" | "int" | "int64" | "bool" | "float64" | "object" | "array"


schema PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0TransformsItems0Match:
    r"""
    Match is a more complex version of Map that matches a list of patterns.

    Attributes
    ----------
    fallbackTo : str, default is "Value", optional
        Determines to what value the transform should fallback if no pattern matches.
    fallbackValue : any, default is Undefined, optional
        The fallback value that should be returned by the transform if now pattern
        matches.
    patterns : [PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0TransformsItems0MatchPatternsItems0], default is Undefined, optional
        The patterns that should be tested against the input string.
        Patterns are tested in order. The value of the first match is used as
        result of this transform.
    """


    fallbackTo?: "Value" | "Input" = "Value"

    fallbackValue?: any

    patterns?: [PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0TransformsItems0MatchPatternsItems0]


schema PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0TransformsItems0MatchPatternsItems0:
    r"""
    MatchTransformPattern is a transform that returns the value that matches a
    pattern.

    Attributes
    ----------
    literal : str, default is Undefined, optional
        Literal exactly matches the input string (case sensitive).
        Is required if `type` is `literal`.
    regexp : str, default is Undefined, optional
        Regexp to match against the input string.
        Is required if `type` is `regexp`.
    result : any, default is Undefined, required
        The value that is used as result of the transform if the pattern matches.
    $type : str, default is "literal", required
        Type specifies how the pattern matches the input.

        * `literal` - the pattern value has to exactly match (case sensitive) the
        input string. This is the default.

        * `regexp` - the pattern treated as a regular expression against
        which the input string is tested. Crossplane will throw an error if the
        key is not a valid regexp.
    """


    literal?: str

    regexp?: str

    result: any

    $type: "literal" | "regexp" = "literal"


schema PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0TransformsItems0Math:
    r"""
    Math is used to transform the input via mathematical operations such as
    multiplication.

    Attributes
    ----------
    clampMax : int, default is Undefined, optional
        ClampMax makes sure that the value is not bigger than the given value.
    clampMin : int, default is Undefined, optional
        ClampMin makes sure that the value is not smaller than the given value.
    multiply : int, default is Undefined, optional
        Multiply the value.
    $type : str, default is "Multiply", optional
        Type of the math transform to be run.
    """


    clampMax?: int

    clampMin?: int

    multiply?: int

    $type?: "Multiply" | "ClampMin" | "ClampMax" = "Multiply"


schema PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0TransformsItems0String:
    r"""
    String is used to transform the input into a string or a different kind
    of string. Note that the input does not necessarily need to be a string.

    Attributes
    ----------
    convert : str, default is Undefined, optional
        Optional conversion method to be specified.
        `ToUpper` and `ToLower` change the letter case of the input string.
        `ToBase64` and `FromBase64` perform a base64 conversion based on the input string.
        `ToJson` converts any input value into its raw JSON representation.
        `ToSha1`, `ToSha256` and `ToSha512` generate a hash value based on the input
        converted to JSON.
    fmt : str, default is Undefined, optional
        Format the input using a Go format string. See
        https://golang.org/pkg/fmt/ for details.
    join : PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0TransformsItems0StringJoin, default is Undefined, optional
        join
    regexp : PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0TransformsItems0StringRegexp, default is Undefined, optional
        regexp
    replace : PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0TransformsItems0StringReplace, default is Undefined, optional
        replace
    trim : str, default is Undefined, optional
        Trim the prefix or suffix from the input
    $type : str, default is "Format", required
        Type of the string transform to be run.
    """


    convert?: "ToUpper" | "ToLower" | "ToBase64" | "FromBase64" | "ToJson" | "ToSha1" | "ToSha256" | "ToSha512"

    fmt?: str

    join?: PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0TransformsItems0StringJoin

    regexp?: PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0TransformsItems0StringRegexp

    replace?: PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0TransformsItems0StringReplace

    trim?: str

    $type: "Format" | "Convert" | "TrimPrefix" | "TrimSuffix" | "Regexp" = "Format"


schema PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0TransformsItems0StringJoin:
    r"""
    Join the input strings.

    Attributes
    ----------
    separator : str, default is Undefined, required
        Separator to join the input strings.
    """


    separator: str


schema PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0TransformsItems0StringRegexp:
    r"""
    Extract a match from the input using a regular expression.

    Attributes
    ----------
    group : int, default is Undefined, optional
        Group number to match. 0 (the default) matches the entire expression.
    match : str, default is Undefined, required
        Match string. May optionally include submatches, aka capture groups.
        See https://pkg.go.dev/regexp/ for details.
    """


    group?: int

    match: str


schema PtFnCrossplaneIoV1beta1ResourcesPatchSetsItems0PatchesItems0TransformsItems0StringReplace:
    r"""
    Search/Replace applied to the input string.

    Attributes
    ----------
    replace : str, default is Undefined, required
        The Replace string replaces all occurrences of the search string.
    search : str, default is Undefined, required
        The Search string to match.
    """


    replace: str

    search: str


schema PtFnCrossplaneIoV1beta1ResourcesResourcesItems0:
    r"""
    ComposedTemplate is used to provide information about how the composed
    resource should be processed.

    Attributes
    ----------
    base : any, default is Undefined, optional
        Base of the composed resource that patches will be applied to and from.
        If base is omitted, a previous Function within the pipeline must have
        produced the named composed resource. Patches will be applied to and from
        that resource. If base is specified, and a previous Function within the
        pipeline produced the name composed resource, it will be overwritten.
    connectionDetails : [PtFnCrossplaneIoV1beta1ResourcesResourcesItems0ConnectionDetailsItems0], default is Undefined, optional
        ConnectionDetails lists the propagation secret keys from this composed
        resource to the composition instance connection secret.
    name : str, default is Undefined, required
        A Name uniquely identifies this entry within its resources array.
    patches : [PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0], default is Undefined, optional
        Patches to and from the composed resource.
    readinessChecks : [PtFnCrossplaneIoV1beta1ResourcesResourcesItems0ReadinessChecksItems0], default is [{"type": "MatchCondition", "matchCondition": {"status": "True", "type": "Ready"}}], optional
        ReadinessChecks allows users to define custom readiness checks. All
        checks have to return true in order for resource to be considered ready.
        The default readiness check is to have the "Ready" condition to be
        "True".
    """


    base?: any

    connectionDetails?: [PtFnCrossplaneIoV1beta1ResourcesResourcesItems0ConnectionDetailsItems0]

    name: str

    patches?: [PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0]

    readinessChecks?: [PtFnCrossplaneIoV1beta1ResourcesResourcesItems0ReadinessChecksItems0] = [{"matchCondition": {"status": "True", "type": "Ready"}, "type": "MatchCondition"}]


schema PtFnCrossplaneIoV1beta1ResourcesResourcesItems0ConnectionDetailsItems0:
    r"""
    ConnectionDetail includes the information about the propagation of the connection
    information from one secret to another.

    Attributes
    ----------
    fromConnectionSecretKey : str, default is Undefined, optional
        FromConnectionSecretKey is the key that will be used to fetch the value
        from the composed resource's connection secret.
    fromFieldPath : str, default is Undefined, optional
        FromFieldPath is the path of the field on the composed resource whose
        value to be used as input. Name must be specified if the type is
        FromFieldPath.
    name : str, default is Undefined, required
        Name of the connection secret key that will be propagated to the
        connection secret of the composed resource.
    $type : str, default is Undefined, required
        Type sets the connection detail fetching behavior to be used. Each
        connection detail type may require its own fields to be set on the
        ConnectionDetail object.
    value : str, default is Undefined, optional
        Value that will be propagated to the connection secret of the composite
        resource. May be set to inject a fixed, non-sensitive connection secret
        value, for example a well-known port.
    """


    fromConnectionSecretKey?: str

    fromFieldPath?: str

    name: str

    $type: "FromConnectionSecretKey" | "FromFieldPath" | "FromValue"

    value?: str


schema PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0:
    r"""
    ComposedPatch objects are applied between composite and composed resources.
    Their behaviour depends on the Type selected. The default Type,
    FromCompositeFieldPath, copies a value from the composite resource to the
    composed resource, applying any defined transformers.

    Attributes
    ----------
    combine : PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0Combine, default is Undefined, optional
        combine
    fromFieldPath : str, default is Undefined, optional
        FromFieldPath is the path of the field on the resource whose value is
        to be used as input. Required when type is FromCompositeFieldPath or
        ToCompositeFieldPath.
    patchSetName : str, default is Undefined, optional
        PatchSetName to include patches from. Required when type is PatchSet.
    policy : PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0Policy, default is Undefined, optional
        policy
    toFieldPath : str, default is Undefined, optional
        ToFieldPath is the path of the field on the resource whose value will
        be changed with the result of transforms. Leave empty if you'd like to
        propagate to the same path as fromFieldPath.
    transforms : [PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0TransformsItems0], default is Undefined, optional
        Transforms are the list of functions that are used as a FIFO pipe for the
        input to be transformed.
    $type : str, default is "FromCompositeFieldPath", optional
        Type sets the patching behaviour to be used. Each patch type may require
        its own fields to be set on the ComposedPatch object.
    """


    combine?: PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0Combine

    fromFieldPath?: str

    patchSetName?: str

    policy?: PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0Policy

    toFieldPath?: str

    transforms?: [PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0TransformsItems0]

    $type?: "FromCompositeFieldPath" | "PatchSet" | "ToCompositeFieldPath" | "CombineFromComposite" | "CombineToComposite" | "FromEnvironmentFieldPath" | "ToEnvironmentFieldPath" | "CombineFromEnvironment" | "CombineToEnvironment" = "FromCompositeFieldPath"


schema PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0Combine:
    r"""
    Combine is the patch configuration for a CombineFromComposite,
    CombineToComposite patch.

    Attributes
    ----------
    strategy : str, default is Undefined, required
        Strategy defines the strategy to use to combine the input variable values.
        Currently only string is supported.
    string : PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0CombineString, default is Undefined, optional
        string
    variables : [PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0CombineVariablesItems0], default is Undefined, required
        Variables are the list of variables whose values will be retrieved and
        combined.
    """


    strategy: "string"

    string?: PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0CombineString

    variables: [PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0CombineVariablesItems0]


    check:
        len(variables) >= 1


schema PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0CombineString:
    r"""
    String declares that input variables should be combined into a single
    string, using the relevant settings for formatting purposes.

    Attributes
    ----------
    fmt : str, default is Undefined, required
        Format the input using a Go format string. See
        https://golang.org/pkg/fmt/ for details.
    """


    fmt: str


schema PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0CombineVariablesItems0:
    r"""
    A CombineVariable defines the source of a value that is combined with
    others to form and patch an output value. Currently, this only supports
    retrieving values from a field path.

    Attributes
    ----------
    fromFieldPath : str, default is Undefined, required
        FromFieldPath is the path of the field on the source whose value is
        to be used as input.
    """


    fromFieldPath: str


schema PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0Policy:
    r"""
    Policy configures the specifics of patching behaviour.

    Attributes
    ----------
    fromFieldPath : str, default is Undefined, optional
        FromFieldPath specifies how to patch from a field path. The default is
        'Optional', which means the patch will be a no-op if the specified
        fromFieldPath does not exist. Use 'Required' to prevent the creation of a
        new composed resource until the required path exists.
    toFieldPath : str, default is Undefined, optional
        ToFieldPath specifies how to patch to a field path. The default is
        'Replace', which means the patch will completely replace the target field,
        or create it if it does not exist. Use 'MergeObjects' to recursively merge the patch
        object with the target object, while keeping target object keys, but overwriting any array values, or use
        'MergeObjectsAppendArrays' to recursively merge the patch object with the target object, while keeping
        target object keys and appending any array values to target array values, or use
        'ForceMergeObjects' to recursively merge the patch object with the target object, overwriting
        any target object keys, including array values, or use
        'ForceMergeObjectsAppendArrays' to recursively merge the patch object with the target object,
        overwriting target object keys, and appending any array values to target array values.
        'MergeObject' is deprecated, use 'MergeObjects' instead, which is functionally identical.
        'AppendArray' is deprecated, use 'ForceMergeObjectsAppendArrays' instead, which is functionally identical.
    """


    fromFieldPath?: "Optional" | "Required"

    toFieldPath?: "Replace" | "MergeObjects" | "MergeObjectsAppendArrays" | "ForceMergeObjects" | "ForceMergeObjectsAppendArrays" | "MergeObject" | "AppendArray"


schema PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0TransformsItems0:
    r"""
    Transform is a unit of process whose input is transformed into an output with
    the supplied configuration.

    Attributes
    ----------
    convert : PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0TransformsItems0Convert, default is Undefined, optional
        convert
    $map : {str:any}, default is Undefined, optional
        Map uses the input as a key in the given map and returns the value.
    match : PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0TransformsItems0Match, default is Undefined, optional
        match
    math : PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0TransformsItems0Math, default is Undefined, optional
        math
    string : PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0TransformsItems0String, default is Undefined, optional
        string
    $type : str, default is Undefined, required
        Type of the transform to be run.
    """


    convert?: PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0TransformsItems0Convert

    $map?: {str:any}

    match?: PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0TransformsItems0Match

    math?: PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0TransformsItems0Math

    string?: PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0TransformsItems0String

    $type: "map" | "match" | "math" | "string" | "convert"


schema PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0TransformsItems0Convert:
    r"""
    Convert is used to cast the input into the given output type.

    Attributes
    ----------
    format : str, default is Undefined, optional
        The expected input format.

        * `quantity` - parses the input as a K8s [`resource.Quantity`](https://pkg.go.dev/k8s.io/apimachinery/pkg/api/resource#Quantity).
        Only used during `string -> float64` conversions.
        * `json` - parses the input as a JSON string.
        Only used during `string -> object` or `string -> list` conversions.

        If this property is null, the default conversion is applied.
    toType : str, default is Undefined, required
        ToType is the type of the output of this transform.
    """


    format?: "none" | "quantity" | "json"

    toType: "string" | "int" | "int64" | "bool" | "float64" | "object" | "array"


schema PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0TransformsItems0Match:
    r"""
    Match is a more complex version of Map that matches a list of patterns.

    Attributes
    ----------
    fallbackTo : str, default is "Value", optional
        Determines to what value the transform should fallback if no pattern matches.
    fallbackValue : any, default is Undefined, optional
        The fallback value that should be returned by the transform if now pattern
        matches.
    patterns : [PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0TransformsItems0MatchPatternsItems0], default is Undefined, optional
        The patterns that should be tested against the input string.
        Patterns are tested in order. The value of the first match is used as
        result of this transform.
    """


    fallbackTo?: "Value" | "Input" = "Value"

    fallbackValue?: any

    patterns?: [PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0TransformsItems0MatchPatternsItems0]


schema PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0TransformsItems0MatchPatternsItems0:
    r"""
    MatchTransformPattern is a transform that returns the value that matches a
    pattern.

    Attributes
    ----------
    literal : str, default is Undefined, optional
        Literal exactly matches the input string (case sensitive).
        Is required if `type` is `literal`.
    regexp : str, default is Undefined, optional
        Regexp to match against the input string.
        Is required if `type` is `regexp`.
    result : any, default is Undefined, required
        The value that is used as result of the transform if the pattern matches.
    $type : str, default is "literal", required
        Type specifies how the pattern matches the input.

        * `literal` - the pattern value has to exactly match (case sensitive) the
        input string. This is the default.

        * `regexp` - the pattern treated as a regular expression against
        which the input string is tested. Crossplane will throw an error if the
        key is not a valid regexp.
    """


    literal?: str

    regexp?: str

    result: any

    $type: "literal" | "regexp" = "literal"


schema PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0TransformsItems0Math:
    r"""
    Math is used to transform the input via mathematical operations such as
    multiplication.

    Attributes
    ----------
    clampMax : int, default is Undefined, optional
        ClampMax makes sure that the value is not bigger than the given value.
    clampMin : int, default is Undefined, optional
        ClampMin makes sure that the value is not smaller than the given value.
    multiply : int, default is Undefined, optional
        Multiply the value.
    $type : str, default is "Multiply", optional
        Type of the math transform to be run.
    """


    clampMax?: int

    clampMin?: int

    multiply?: int

    $type?: "Multiply" | "ClampMin" | "ClampMax" = "Multiply"


schema PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0TransformsItems0String:
    r"""
    String is used to transform the input into a string or a different kind
    of string. Note that the input does not necessarily need to be a string.

    Attributes
    ----------
    convert : str, default is Undefined, optional
        Optional conversion method to be specified.
        `ToUpper` and `ToLower` change the letter case of the input string.
        `ToBase64` and `FromBase64` perform a base64 conversion based on the input string.
        `ToJson` converts any input value into its raw JSON representation.
        `ToSha1`, `ToSha256` and `ToSha512` generate a hash value based on the input
        converted to JSON.
    fmt : str, default is Undefined, optional
        Format the input using a Go format string. See
        https://golang.org/pkg/fmt/ for details.
    join : PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0TransformsItems0StringJoin, default is Undefined, optional
        join
    regexp : PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0TransformsItems0StringRegexp, default is Undefined, optional
        regexp
    replace : PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0TransformsItems0StringReplace, default is Undefined, optional
        replace
    trim : str, default is Undefined, optional
        Trim the prefix or suffix from the input
    $type : str, default is "Format", required
        Type of the string transform to be run.
    """


    convert?: "ToUpper" | "ToLower" | "ToBase64" | "FromBase64" | "ToJson" | "ToSha1" | "ToSha256" | "ToSha512"

    fmt?: str

    join?: PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0TransformsItems0StringJoin

    regexp?: PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0TransformsItems0StringRegexp

    replace?: PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0TransformsItems0StringReplace

    trim?: str

    $type: "Format" | "Convert" | "TrimPrefix" | "TrimSuffix" | "Regexp" = "Format"


schema PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0TransformsItems0StringJoin:
    r"""
    Join the input strings.

    Attributes
    ----------
    separator : str, default is Undefined, required
        Separator to join the input strings.
    """


    separator: str


schema PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0TransformsItems0StringRegexp:
    r"""
    Extract a match from the input using a regular expression.

    Attributes
    ----------
    group : int, default is Undefined, optional
        Group number to match. 0 (the default) matches the entire expression.
    match : str, default is Undefined, required
        Match string. May optionally include submatches, aka capture groups.
        See https://pkg.go.dev/regexp/ for details.
    """


    group?: int

    match: str


schema PtFnCrossplaneIoV1beta1ResourcesResourcesItems0PatchesItems0TransformsItems0StringReplace:
    r"""
    Search/Replace applied to the input string.

    Attributes
    ----------
    replace : str, default is Undefined, required
        The Replace string replaces all occurrences of the search string.
    search : str, default is Undefined, required
        The Search string to match.
    """


    replace: str

    search: str


schema PtFnCrossplaneIoV1beta1ResourcesResourcesItems0ReadinessChecksItems0:
    r"""
    ReadinessCheck is used to indicate how to tell whether a resource is ready
    for consumption

    Attributes
    ----------
    fieldPath : str, default is Undefined, optional
        FieldPath shows the path of the field whose value will be used.
    matchCondition : PtFnCrossplaneIoV1beta1ResourcesResourcesItems0ReadinessChecksItems0MatchCondition, default is Undefined, optional
        match condition
    matchInteger : int, default is Undefined, optional
        MatchInt is the value you'd like to match if you're using "MatchInt" type.
    matchString : str, default is Undefined, optional
        MatchString is the value you'd like to match if you're using "MatchString" type.
    $type : str, default is Undefined, required
        Type indicates the type of probe you'd like to use.
    """


    fieldPath?: str

    matchCondition?: PtFnCrossplaneIoV1beta1ResourcesResourcesItems0ReadinessChecksItems0MatchCondition

    matchInteger?: int

    matchString?: str

    $type: "MatchString" | "MatchInteger" | "NonEmpty" | "MatchCondition" | "MatchTrue" | "MatchFalse" | "None"


schema PtFnCrossplaneIoV1beta1ResourcesResourcesItems0ReadinessChecksItems0MatchCondition:
    r"""
    MatchCondition specifies the condition you'd like to match if you're using "MatchCondition" type.

    Attributes
    ----------
    status : str, default is "True", required
        Status is the status of the condition you'd like to match.
    $type : str, default is "Ready", required
        Type indicates the type of condition you'd like to use.
    """


    status: str = "True"

    $type: str = "Ready"


