# Generated by cloudcoil-model-codegen v0.5.8
# DO NOT EDIT

from __future__ import annotations

from typing import Type

from cloudcoil.pydantic import (
    BaseModel,
    BaseModelBuilder,
    BuilderContextBase,
    GenericListBuilder,
)


class ObjectMeta(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ObjectMeta"]:
            return ObjectMeta

        def build(self) -> "ObjectMeta":
            return ObjectMeta(**self._attrs)

    class BuilderContext(BuilderContextBase["ObjectMeta.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ObjectMeta.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ObjectMeta."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ObjectMeta", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ObjectMeta.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    pass
