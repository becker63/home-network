# Generated by cloudcoil-model-codegen v0.5.8
# DO NOT EDIT

from __future__ import annotations

from datetime import datetime
from typing import (
    Annotated,
    Callable,
    List,
    Literal,
    Optional,
    Type,
    overload,
)

from cloudcoil.pydantic import (
    BaseModel,
    BaseModelBuilder,
    BuilderContextBase,
    GenericListBuilder,
    ListBuilderContext,
    Never,
    Self,
)
from cloudcoil.resources import Resource
from pydantic import Field

from ...k8s.apimachinery.pkg.apis.meta import v1


class Env(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Env"]:
            return Env

        def build(self) -> "Env":
            return Env(**self._attrs)

        def name(self, value: str, /) -> Self:
            """
            Name is the name of an environment variable.
            """
            return self._set("name", value)

    class BuilderContext(BuilderContextBase["Env.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Env.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Env."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Env", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Env.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    name: str
    """
    Name is the name of an environment variable.
    """


class Fs(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Fs"]:
            return Fs

        def build(self) -> "Fs":
            return Fs(**self._attrs)

        def path(self, value: str, /) -> Self:
            """
            Path is a filesystem path.
            """
            return self._set("path", value)

    class BuilderContext(BuilderContextBase["Fs.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Fs.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Fs."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Fs", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Fs.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    path: str
    """
    Path is a filesystem path.
    """


class SecretRef(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["SecretRef"]:
            return SecretRef

        def build(self) -> "SecretRef":
            return SecretRef(**self._attrs)

        def key(self, value: str, /) -> Self:
            """
            The key to select.
            """
            return self._set("key", value)

        def name(self, value: str, /) -> Self:
            """
            Name of the secret.
            """
            return self._set("name", value)

        def namespace(self, value: str, /) -> Self:
            """
            Namespace of the secret.
            """
            return self._set("namespace", value)

    class BuilderContext(BuilderContextBase["SecretRef.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = SecretRef.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for SecretRef."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["SecretRef", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use SecretRef.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: str
    """
    The key to select.
    """
    name: str
    """
    Name of the secret.
    """
    namespace: str
    """
    Namespace of the secret.
    """


class Credentials(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Credentials"]:
            return Credentials

        def build(self) -> "Credentials":
            return Credentials(**self._attrs)

        @overload
        def env(self, value_or_callback: Optional[Env], /) -> "Credentials.Builder": ...

        @overload
        def env(
            self, value_or_callback: Callable[[Env.Builder], Env.Builder | Env], /
        ) -> "Credentials.Builder": ...

        @overload
        def env(self, value_or_callback: Never = ...) -> "Env.BuilderContext": ...

        def env(self, value_or_callback=None, /):
            """
            Env is a reference to an environment variable that contains credentials
            that must be used to connect to the provider.
            """
            if self._in_context and value_or_callback is None:
                context = Env.BuilderContext()
                context._parent_builder = self
                context._field_name = "env"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Env.builder())
                if isinstance(output, Env.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("env", value)

        @overload
        def fs(self, value_or_callback: Optional[Fs], /) -> "Credentials.Builder": ...

        @overload
        def fs(
            self, value_or_callback: Callable[[Fs.Builder], Fs.Builder | Fs], /
        ) -> "Credentials.Builder": ...

        @overload
        def fs(self, value_or_callback: Never = ...) -> "Fs.BuilderContext": ...

        def fs(self, value_or_callback=None, /):
            """
            Fs is a reference to a filesystem location that contains credentials that
            must be used to connect to the provider.
            """
            if self._in_context and value_or_callback is None:
                context = Fs.BuilderContext()
                context._parent_builder = self
                context._field_name = "fs"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Fs.builder())
                if isinstance(output, Fs.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("fs", value)

        @overload
        def secret_ref(
            self, value_or_callback: Optional[SecretRef], /
        ) -> "Credentials.Builder": ...

        @overload
        def secret_ref(
            self,
            value_or_callback: Callable[[SecretRef.Builder], SecretRef.Builder | SecretRef],
            /,
        ) -> "Credentials.Builder": ...

        @overload
        def secret_ref(self, value_or_callback: Never = ...) -> "SecretRef.BuilderContext": ...

        def secret_ref(self, value_or_callback=None, /):
            """
            A SecretRef is a reference to a secret key that contains the credentials
            that must be used to connect to the provider.
            """
            if self._in_context and value_or_callback is None:
                context = SecretRef.BuilderContext()
                context._parent_builder = self
                context._field_name = "secret_ref"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(SecretRef.builder())
                if isinstance(output, SecretRef.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("secret_ref", value)

        def source(
            self,
            value: Literal["None", "Secret", "InjectedIdentity", "Environment", "Filesystem"],
            /,
        ) -> Self:
            """
            Source of the provider credentials.
            """
            return self._set("source", value)

    class BuilderContext(BuilderContextBase["Credentials.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Credentials.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Credentials."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Credentials", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Credentials.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    env: Optional[Env] = None
    """
    Env is a reference to an environment variable that contains credentials
    that must be used to connect to the provider.
    """
    fs: Optional[Fs] = None
    """
    Fs is a reference to a filesystem location that contains credentials that
    must be used to connect to the provider.
    """
    secret_ref: Annotated[Optional[SecretRef], Field(alias="secretRef")] = None
    """
    A SecretRef is a reference to a secret key that contains the credentials
    that must be used to connect to the provider.
    """
    source: Literal["None", "Secret", "InjectedIdentity", "Environment", "Filesystem"]
    """
    Source of the provider credentials.
    """


class ProviderConfigSpec(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ProviderConfigSpec"]:
            return ProviderConfigSpec

        def build(self) -> "ProviderConfigSpec":
            return ProviderConfigSpec(**self._attrs)

        @overload
        def credentials(
            self, value_or_callback: Credentials, /
        ) -> "ProviderConfigSpec.Builder": ...

        @overload
        def credentials(
            self,
            value_or_callback: Callable[[Credentials.Builder], Credentials.Builder | Credentials],
            /,
        ) -> "ProviderConfigSpec.Builder": ...

        @overload
        def credentials(self, value_or_callback: Never = ...) -> "Credentials.BuilderContext": ...

        def credentials(self, value_or_callback=None, /):
            """
            Credentials required to authenticate to this provider.
            """
            if self._in_context and value_or_callback is None:
                context = Credentials.BuilderContext()
                context._parent_builder = self
                context._field_name = "credentials"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Credentials.builder())
                if isinstance(output, Credentials.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("credentials", value)

    class BuilderContext(BuilderContextBase["ProviderConfigSpec.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ProviderConfigSpec.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ProviderConfigSpec."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ProviderConfigSpec", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ProviderConfigSpec.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    credentials: Credentials
    """
    Credentials required to authenticate to this provider.
    """


class Condition(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Condition"]:
            return Condition

        def build(self) -> "Condition":
            return Condition(**self._attrs)

        def last_transition_time(self, value: datetime, /) -> Self:
            """
            LastTransitionTime is the last time this condition transitioned from one
            status to another.
            """
            return self._set("last_transition_time", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            A Message containing details about this condition's last transition from
            one status to another, if any.
            """
            return self._set("message", value)

        def observed_generation(self, value: Optional[int], /) -> Self:
            """
            ObservedGeneration represents the .metadata.generation that the condition was set based upon.
            For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
            with respect to the current state of the instance.
            """
            return self._set("observed_generation", value)

        def reason(self, value: str, /) -> Self:
            """
            A Reason for this condition's last transition from one status to another.
            """
            return self._set("reason", value)

        def status(self, value: str, /) -> Self:
            """
            Status of this condition; is it currently True, False, or Unknown?
            """
            return self._set("status", value)

        def type(self, value: str, /) -> Self:
            """
            Type of this condition. At most one of each condition type may apply to
            a resource at any point in time.
            """
            return self._set("type", value)

    class BuilderContext(BuilderContextBase["Condition.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Condition.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Condition."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Condition", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Condition.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    last_transition_time: Annotated[datetime, Field(alias="lastTransitionTime")]
    """
    LastTransitionTime is the last time this condition transitioned from one
    status to another.
    """
    message: Optional[str] = None
    """
    A Message containing details about this condition's last transition from
    one status to another, if any.
    """
    observed_generation: Annotated[Optional[int], Field(alias="observedGeneration")] = None
    """
    ObservedGeneration represents the .metadata.generation that the condition was set based upon.
    For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
    with respect to the current state of the instance.
    """
    reason: str
    """
    A Reason for this condition's last transition from one status to another.
    """
    status: str
    """
    Status of this condition; is it currently True, False, or Unknown?
    """
    type: str
    """
    Type of this condition. At most one of each condition type may apply to
    a resource at any point in time.
    """


class ProviderConfigStatus(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ProviderConfigStatus"]:
            return ProviderConfigStatus

        def build(self) -> "ProviderConfigStatus":
            return ProviderConfigStatus(**self._attrs)

        @overload
        def conditions(
            self, value_or_callback: List[Condition], /
        ) -> "ProviderConfigStatus.Builder": ...

        @overload
        def conditions(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Condition, Condition.Builder]],
                GenericListBuilder[Condition, Condition.Builder] | List[Condition],
            ],
            /,
        ) -> "ProviderConfigStatus.Builder": ...

        @overload
        def conditions(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Condition.Builder]: ...

        def conditions(self, value_or_callback=None, /):
            """
            Conditions of the resource.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Condition.Builder]()
                context._parent_builder = self
                context._field_name = "conditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Condition.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("conditions", value)

        def users(self, value: Optional[int], /) -> Self:
            """
            Users of this provider configuration.
            """
            return self._set("users", value)

    class BuilderContext(BuilderContextBase["ProviderConfigStatus.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ProviderConfigStatus.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ProviderConfigStatus."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ProviderConfigStatus", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ProviderConfigStatus.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    conditions: Optional[List[Condition]] = None
    """
    Conditions of the resource.
    """
    users: Optional[int] = None
    """
    Users of this provider configuration.
    """


class ProviderConfig(Resource):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ProviderConfig"]:
            return ProviderConfig

        def build(self) -> "ProviderConfig":
            return ProviderConfig(**self._attrs)

        def api_version(
            self, value: Optional[Literal["digitalocean.crossplane.io/v1beta1"]], /
        ) -> Self:
            """
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and
            may reject unrecognized values.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            """
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["ProviderConfig"]], /) -> Self:
            """
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to.
            Cannot be updated.
            In CamelCase.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            """
            return self._set("kind", value)

        @overload
        def metadata(
            self, value_or_callback: Optional[v1.ObjectMeta], /
        ) -> "ProviderConfig.Builder": ...

        @overload
        def metadata(
            self,
            value_or_callback: Callable[
                [v1.ObjectMeta.Builder], v1.ObjectMeta.Builder | v1.ObjectMeta
            ],
            /,
        ) -> "ProviderConfig.Builder": ...

        @overload
        def metadata(self, value_or_callback: Never = ...) -> "v1.ObjectMeta.BuilderContext": ...

        def metadata(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = v1.ObjectMeta.BuilderContext()
                context._parent_builder = self
                context._field_name = "metadata"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(v1.ObjectMeta.builder())
                if isinstance(output, v1.ObjectMeta.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("metadata", value)

        @overload
        def spec(self, value_or_callback: ProviderConfigSpec, /) -> "ProviderConfig.Builder": ...

        @overload
        def spec(
            self,
            value_or_callback: Callable[
                [ProviderConfigSpec.Builder],
                ProviderConfigSpec.Builder | ProviderConfigSpec,
            ],
            /,
        ) -> "ProviderConfig.Builder": ...

        @overload
        def spec(self, value_or_callback: Never = ...) -> "ProviderConfigSpec.BuilderContext": ...

        def spec(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = ProviderConfigSpec.BuilderContext()
                context._parent_builder = self
                context._field_name = "spec"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ProviderConfigSpec.builder())
                if isinstance(output, ProviderConfigSpec.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("spec", value)

        @overload
        def status(
            self, value_or_callback: Optional[ProviderConfigStatus], /
        ) -> "ProviderConfig.Builder": ...

        @overload
        def status(
            self,
            value_or_callback: Callable[
                [ProviderConfigStatus.Builder],
                ProviderConfigStatus.Builder | ProviderConfigStatus,
            ],
            /,
        ) -> "ProviderConfig.Builder": ...

        @overload
        def status(
            self, value_or_callback: Never = ...
        ) -> "ProviderConfigStatus.BuilderContext": ...

        def status(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = ProviderConfigStatus.BuilderContext()
                context._parent_builder = self
                context._field_name = "status"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ProviderConfigStatus.builder())
                if isinstance(output, ProviderConfigStatus.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("status", value)

    class BuilderContext(BuilderContextBase["ProviderConfig.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ProviderConfig.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ProviderConfig."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ProviderConfig", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ProviderConfig.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[
        Optional[Literal["digitalocean.crossplane.io/v1beta1"]],
        Field(alias="apiVersion"),
    ] = "digitalocean.crossplane.io/v1beta1"
    """
    APIVersion defines the versioned schema of this representation of an object.
    Servers should convert recognized schemas to the latest internal value, and
    may reject unrecognized values.
    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[Literal["ProviderConfig"]] = "ProviderConfig"
    """
    Kind is a string value representing the REST resource this object represents.
    Servers may infer this from the endpoint the client submits requests to.
    Cannot be updated.
    In CamelCase.
    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[v1.ObjectMeta] = None
    spec: ProviderConfigSpec
    status: Optional[ProviderConfigStatus] = None
