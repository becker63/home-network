# Generated by cloudcoil-model-codegen v0.5.8
# DO NOT EDIT

from __future__ import annotations

from datetime import datetime
from typing import (
    Annotated,
    Callable,
    Dict,
    List,
    Literal,
    Optional,
    Type,
    overload,
)

from cloudcoil.pydantic import (
    BaseModel,
    BaseModelBuilder,
    BuilderContextBase,
    GenericListBuilder,
    ListBuilderContext,
    Never,
    Self,
)
from cloudcoil.resources import Resource
from pydantic import Field

from ....k8s.apimachinery.pkg.apis.meta import v1


class Policy(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Policy"]:
            return Policy

        def build(self) -> "Policy":
            return Policy(**self._attrs)

        def resolution(self, value: Optional[Literal["Required", "Optional"]], /) -> Self:
            """
            Resolution specifies whether resolution of this reference is required.
            The default is 'Required', which means the reconcile will fail if the
            reference cannot be resolved. 'Optional' means this reference will be
            a no-op if it cannot be resolved.
            """
            return self._set("resolution", value)

        def resolve(self, value: Optional[Literal["Always", "IfNotPresent"]], /) -> Self:
            """
            Resolve specifies when this reference should be resolved. The default
            is 'IfNotPresent', which will attempt to resolve the reference only when
            the corresponding field is not present. Use 'Always' to resolve the
            reference on every reconcile.
            """
            return self._set("resolve", value)

    class BuilderContext(BuilderContextBase["Policy.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Policy.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Policy."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Policy", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Policy.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    resolution: Optional[Literal["Required", "Optional"]] = "Required"
    """
    Resolution specifies whether resolution of this reference is required.
    The default is 'Required', which means the reconcile will fail if the
    reference cannot be resolved. 'Optional' means this reference will be
    a no-op if it cannot be resolved.
    """
    resolve: Optional[Literal["Always", "IfNotPresent"]] = None
    """
    Resolve specifies when this reference should be resolved. The default
    is 'IfNotPresent', which will attempt to resolve the reference only when
    the corresponding field is not present. Use 'Always' to resolve the
    reference on every reconcile.
    """


class DropletIdRef(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["DropletIdRef"]:
            return DropletIdRef

        def build(self) -> "DropletIdRef":
            return DropletIdRef(**self._attrs)

        def name(self, value: str, /) -> Self:
            """
            Name of the referenced object.
            """
            return self._set("name", value)

        @overload
        def policy(self, value_or_callback: Optional[Policy], /) -> "DropletIdRef.Builder": ...

        @overload
        def policy(
            self,
            value_or_callback: Callable[[Policy.Builder], Policy.Builder | Policy],
            /,
        ) -> "DropletIdRef.Builder": ...

        @overload
        def policy(self, value_or_callback: Never = ...) -> "Policy.BuilderContext": ...

        def policy(self, value_or_callback=None, /):
            """
            Policies for referencing.
            """
            if self._in_context and value_or_callback is None:
                context = Policy.BuilderContext()
                context._parent_builder = self
                context._field_name = "policy"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Policy.builder())
                if isinstance(output, Policy.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("policy", value)

    class BuilderContext(BuilderContextBase["DropletIdRef.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = DropletIdRef.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for DropletIdRef."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["DropletIdRef", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use DropletIdRef.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    name: str
    """
    Name of the referenced object.
    """
    policy: Optional[Policy] = None
    """
    Policies for referencing.
    """


class DropletIdSelector(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["DropletIdSelector"]:
            return DropletIdSelector

        def build(self) -> "DropletIdSelector":
            return DropletIdSelector(**self._attrs)

        def match_controller_ref(self, value: Optional[bool], /) -> Self:
            """
            MatchControllerRef ensures an object with the same controller reference
            as the selecting object is selected.
            """
            return self._set("match_controller_ref", value)

        def match_labels(self, value: Optional[Dict[str, str]], /) -> Self:
            """
            MatchLabels ensures an object with matching labels is selected.
            """
            return self._set("match_labels", value)

        @overload
        def policy(self, value_or_callback: Optional[Policy], /) -> "DropletIdSelector.Builder": ...

        @overload
        def policy(
            self,
            value_or_callback: Callable[[Policy.Builder], Policy.Builder | Policy],
            /,
        ) -> "DropletIdSelector.Builder": ...

        @overload
        def policy(self, value_or_callback: Never = ...) -> "Policy.BuilderContext": ...

        def policy(self, value_or_callback=None, /):
            """
            Policies for selection.
            """
            if self._in_context and value_or_callback is None:
                context = Policy.BuilderContext()
                context._parent_builder = self
                context._field_name = "policy"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Policy.builder())
                if isinstance(output, Policy.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("policy", value)

    class BuilderContext(BuilderContextBase["DropletIdSelector.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = DropletIdSelector.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for DropletIdSelector."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["DropletIdSelector", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use DropletIdSelector.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    match_controller_ref: Annotated[Optional[bool], Field(alias="matchControllerRef")] = None
    """
    MatchControllerRef ensures an object with the same controller reference
    as the selecting object is selected.
    """
    match_labels: Annotated[Optional[Dict[str, str]], Field(alias="matchLabels")] = None
    """
    MatchLabels ensures an object with matching labels is selected.
    """
    policy: Optional[Policy] = None
    """
    Policies for selection.
    """


class IpAddressRef(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["IpAddressRef"]:
            return IpAddressRef

        def build(self) -> "IpAddressRef":
            return IpAddressRef(**self._attrs)

        def name(self, value: str, /) -> Self:
            """
            Name of the referenced object.
            """
            return self._set("name", value)

        @overload
        def policy(self, value_or_callback: Optional[Policy], /) -> "IpAddressRef.Builder": ...

        @overload
        def policy(
            self,
            value_or_callback: Callable[[Policy.Builder], Policy.Builder | Policy],
            /,
        ) -> "IpAddressRef.Builder": ...

        @overload
        def policy(self, value_or_callback: Never = ...) -> "Policy.BuilderContext": ...

        def policy(self, value_or_callback=None, /):
            """
            Policies for referencing.
            """
            if self._in_context and value_or_callback is None:
                context = Policy.BuilderContext()
                context._parent_builder = self
                context._field_name = "policy"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Policy.builder())
                if isinstance(output, Policy.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("policy", value)

    class BuilderContext(BuilderContextBase["IpAddressRef.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = IpAddressRef.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for IpAddressRef."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["IpAddressRef", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use IpAddressRef.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    name: str
    """
    Name of the referenced object.
    """
    policy: Optional[Policy] = None
    """
    Policies for referencing.
    """


class IpAddressSelector(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["IpAddressSelector"]:
            return IpAddressSelector

        def build(self) -> "IpAddressSelector":
            return IpAddressSelector(**self._attrs)

        def match_controller_ref(self, value: Optional[bool], /) -> Self:
            """
            MatchControllerRef ensures an object with the same controller reference
            as the selecting object is selected.
            """
            return self._set("match_controller_ref", value)

        def match_labels(self, value: Optional[Dict[str, str]], /) -> Self:
            """
            MatchLabels ensures an object with matching labels is selected.
            """
            return self._set("match_labels", value)

        @overload
        def policy(self, value_or_callback: Optional[Policy], /) -> "IpAddressSelector.Builder": ...

        @overload
        def policy(
            self,
            value_or_callback: Callable[[Policy.Builder], Policy.Builder | Policy],
            /,
        ) -> "IpAddressSelector.Builder": ...

        @overload
        def policy(self, value_or_callback: Never = ...) -> "Policy.BuilderContext": ...

        def policy(self, value_or_callback=None, /):
            """
            Policies for selection.
            """
            if self._in_context and value_or_callback is None:
                context = Policy.BuilderContext()
                context._parent_builder = self
                context._field_name = "policy"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Policy.builder())
                if isinstance(output, Policy.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("policy", value)

    class BuilderContext(BuilderContextBase["IpAddressSelector.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = IpAddressSelector.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for IpAddressSelector."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["IpAddressSelector", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use IpAddressSelector.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    match_controller_ref: Annotated[Optional[bool], Field(alias="matchControllerRef")] = None
    """
    MatchControllerRef ensures an object with the same controller reference
    as the selecting object is selected.
    """
    match_labels: Annotated[Optional[Dict[str, str]], Field(alias="matchLabels")] = None
    """
    MatchLabels ensures an object with matching labels is selected.
    """
    policy: Optional[Policy] = None
    """
    Policies for selection.
    """


class ForProvider(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ForProvider"]:
            return ForProvider

        def build(self) -> "ForProvider":
            return ForProvider(**self._attrs)

        def droplet_id(self, value: Optional[float], /) -> Self:
            """
            The ID of Droplet that the reserved IP will be assigned to.
            """
            return self._set("droplet_id", value)

        @overload
        def droplet_id_ref(
            self, value_or_callback: Optional[DropletIdRef], /
        ) -> "ForProvider.Builder": ...

        @overload
        def droplet_id_ref(
            self,
            value_or_callback: Callable[
                [DropletIdRef.Builder], DropletIdRef.Builder | DropletIdRef
            ],
            /,
        ) -> "ForProvider.Builder": ...

        @overload
        def droplet_id_ref(
            self, value_or_callback: Never = ...
        ) -> "DropletIdRef.BuilderContext": ...

        def droplet_id_ref(self, value_or_callback=None, /):
            """
            Reference to a Droplet in droplet to populate dropletId.
            """
            if self._in_context and value_or_callback is None:
                context = DropletIdRef.BuilderContext()
                context._parent_builder = self
                context._field_name = "droplet_id_ref"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(DropletIdRef.builder())
                if isinstance(output, DropletIdRef.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("droplet_id_ref", value)

        @overload
        def droplet_id_selector(
            self, value_or_callback: Optional[DropletIdSelector], /
        ) -> "ForProvider.Builder": ...

        @overload
        def droplet_id_selector(
            self,
            value_or_callback: Callable[
                [DropletIdSelector.Builder],
                DropletIdSelector.Builder | DropletIdSelector,
            ],
            /,
        ) -> "ForProvider.Builder": ...

        @overload
        def droplet_id_selector(
            self, value_or_callback: Never = ...
        ) -> "DropletIdSelector.BuilderContext": ...

        def droplet_id_selector(self, value_or_callback=None, /):
            """
            Selector for a Droplet in droplet to populate dropletId.
            """
            if self._in_context and value_or_callback is None:
                context = DropletIdSelector.BuilderContext()
                context._parent_builder = self
                context._field_name = "droplet_id_selector"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(DropletIdSelector.builder())
                if isinstance(output, DropletIdSelector.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("droplet_id_selector", value)

        def ip_address(self, value: Optional[str], /) -> Self:
            """
            The reserved IP to assign to the Droplet.
            """
            return self._set("ip_address", value)

        @overload
        def ip_address_ref(
            self, value_or_callback: Optional[IpAddressRef], /
        ) -> "ForProvider.Builder": ...

        @overload
        def ip_address_ref(
            self,
            value_or_callback: Callable[
                [IpAddressRef.Builder], IpAddressRef.Builder | IpAddressRef
            ],
            /,
        ) -> "ForProvider.Builder": ...

        @overload
        def ip_address_ref(
            self, value_or_callback: Never = ...
        ) -> "IpAddressRef.BuilderContext": ...

        def ip_address_ref(self, value_or_callback=None, /):
            """
            Reference to a IP in networking to populate ipAddress.
            """
            if self._in_context and value_or_callback is None:
                context = IpAddressRef.BuilderContext()
                context._parent_builder = self
                context._field_name = "ip_address_ref"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(IpAddressRef.builder())
                if isinstance(output, IpAddressRef.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("ip_address_ref", value)

        @overload
        def ip_address_selector(
            self, value_or_callback: Optional[IpAddressSelector], /
        ) -> "ForProvider.Builder": ...

        @overload
        def ip_address_selector(
            self,
            value_or_callback: Callable[
                [IpAddressSelector.Builder],
                IpAddressSelector.Builder | IpAddressSelector,
            ],
            /,
        ) -> "ForProvider.Builder": ...

        @overload
        def ip_address_selector(
            self, value_or_callback: Never = ...
        ) -> "IpAddressSelector.BuilderContext": ...

        def ip_address_selector(self, value_or_callback=None, /):
            """
            Selector for a IP in networking to populate ipAddress.
            """
            if self._in_context and value_or_callback is None:
                context = IpAddressSelector.BuilderContext()
                context._parent_builder = self
                context._field_name = "ip_address_selector"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(IpAddressSelector.builder())
                if isinstance(output, IpAddressSelector.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("ip_address_selector", value)

    class BuilderContext(BuilderContextBase["ForProvider.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ForProvider.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ForProvider."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ForProvider", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ForProvider.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    droplet_id: Annotated[Optional[float], Field(alias="dropletId")] = None
    """
    The ID of Droplet that the reserved IP will be assigned to.
    """
    droplet_id_ref: Annotated[Optional[DropletIdRef], Field(alias="dropletIdRef")] = None
    """
    Reference to a Droplet in droplet to populate dropletId.
    """
    droplet_id_selector: Annotated[
        Optional[DropletIdSelector], Field(alias="dropletIdSelector")
    ] = None
    """
    Selector for a Droplet in droplet to populate dropletId.
    """
    ip_address: Annotated[Optional[str], Field(alias="ipAddress")] = None
    """
    The reserved IP to assign to the Droplet.
    """
    ip_address_ref: Annotated[Optional[IpAddressRef], Field(alias="ipAddressRef")] = None
    """
    Reference to a IP in networking to populate ipAddress.
    """
    ip_address_selector: Annotated[
        Optional[IpAddressSelector], Field(alias="ipAddressSelector")
    ] = None
    """
    Selector for a IP in networking to populate ipAddress.
    """


class InitProvider(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["InitProvider"]:
            return InitProvider

        def build(self) -> "InitProvider":
            return InitProvider(**self._attrs)

        def droplet_id(self, value: Optional[float], /) -> Self:
            """
            The ID of Droplet that the reserved IP will be assigned to.
            """
            return self._set("droplet_id", value)

        @overload
        def droplet_id_ref(
            self, value_or_callback: Optional[DropletIdRef], /
        ) -> "InitProvider.Builder": ...

        @overload
        def droplet_id_ref(
            self,
            value_or_callback: Callable[
                [DropletIdRef.Builder], DropletIdRef.Builder | DropletIdRef
            ],
            /,
        ) -> "InitProvider.Builder": ...

        @overload
        def droplet_id_ref(
            self, value_or_callback: Never = ...
        ) -> "DropletIdRef.BuilderContext": ...

        def droplet_id_ref(self, value_or_callback=None, /):
            """
            Reference to a Droplet in droplet to populate dropletId.
            """
            if self._in_context and value_or_callback is None:
                context = DropletIdRef.BuilderContext()
                context._parent_builder = self
                context._field_name = "droplet_id_ref"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(DropletIdRef.builder())
                if isinstance(output, DropletIdRef.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("droplet_id_ref", value)

        @overload
        def droplet_id_selector(
            self, value_or_callback: Optional[DropletIdSelector], /
        ) -> "InitProvider.Builder": ...

        @overload
        def droplet_id_selector(
            self,
            value_or_callback: Callable[
                [DropletIdSelector.Builder],
                DropletIdSelector.Builder | DropletIdSelector,
            ],
            /,
        ) -> "InitProvider.Builder": ...

        @overload
        def droplet_id_selector(
            self, value_or_callback: Never = ...
        ) -> "DropletIdSelector.BuilderContext": ...

        def droplet_id_selector(self, value_or_callback=None, /):
            """
            Selector for a Droplet in droplet to populate dropletId.
            """
            if self._in_context and value_or_callback is None:
                context = DropletIdSelector.BuilderContext()
                context._parent_builder = self
                context._field_name = "droplet_id_selector"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(DropletIdSelector.builder())
                if isinstance(output, DropletIdSelector.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("droplet_id_selector", value)

        def ip_address(self, value: Optional[str], /) -> Self:
            """
            The reserved IP to assign to the Droplet.
            """
            return self._set("ip_address", value)

        @overload
        def ip_address_ref(
            self, value_or_callback: Optional[IpAddressRef], /
        ) -> "InitProvider.Builder": ...

        @overload
        def ip_address_ref(
            self,
            value_or_callback: Callable[
                [IpAddressRef.Builder], IpAddressRef.Builder | IpAddressRef
            ],
            /,
        ) -> "InitProvider.Builder": ...

        @overload
        def ip_address_ref(
            self, value_or_callback: Never = ...
        ) -> "IpAddressRef.BuilderContext": ...

        def ip_address_ref(self, value_or_callback=None, /):
            """
            Reference to a IP in networking to populate ipAddress.
            """
            if self._in_context and value_or_callback is None:
                context = IpAddressRef.BuilderContext()
                context._parent_builder = self
                context._field_name = "ip_address_ref"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(IpAddressRef.builder())
                if isinstance(output, IpAddressRef.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("ip_address_ref", value)

        @overload
        def ip_address_selector(
            self, value_or_callback: Optional[IpAddressSelector], /
        ) -> "InitProvider.Builder": ...

        @overload
        def ip_address_selector(
            self,
            value_or_callback: Callable[
                [IpAddressSelector.Builder],
                IpAddressSelector.Builder | IpAddressSelector,
            ],
            /,
        ) -> "InitProvider.Builder": ...

        @overload
        def ip_address_selector(
            self, value_or_callback: Never = ...
        ) -> "IpAddressSelector.BuilderContext": ...

        def ip_address_selector(self, value_or_callback=None, /):
            """
            Selector for a IP in networking to populate ipAddress.
            """
            if self._in_context and value_or_callback is None:
                context = IpAddressSelector.BuilderContext()
                context._parent_builder = self
                context._field_name = "ip_address_selector"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(IpAddressSelector.builder())
                if isinstance(output, IpAddressSelector.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("ip_address_selector", value)

    class BuilderContext(BuilderContextBase["InitProvider.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = InitProvider.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for InitProvider."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["InitProvider", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use InitProvider.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    droplet_id: Annotated[Optional[float], Field(alias="dropletId")] = None
    """
    The ID of Droplet that the reserved IP will be assigned to.
    """
    droplet_id_ref: Annotated[Optional[DropletIdRef], Field(alias="dropletIdRef")] = None
    """
    Reference to a Droplet in droplet to populate dropletId.
    """
    droplet_id_selector: Annotated[
        Optional[DropletIdSelector], Field(alias="dropletIdSelector")
    ] = None
    """
    Selector for a Droplet in droplet to populate dropletId.
    """
    ip_address: Annotated[Optional[str], Field(alias="ipAddress")] = None
    """
    The reserved IP to assign to the Droplet.
    """
    ip_address_ref: Annotated[Optional[IpAddressRef], Field(alias="ipAddressRef")] = None
    """
    Reference to a IP in networking to populate ipAddress.
    """
    ip_address_selector: Annotated[
        Optional[IpAddressSelector], Field(alias="ipAddressSelector")
    ] = None
    """
    Selector for a IP in networking to populate ipAddress.
    """


class ProviderConfigRef(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ProviderConfigRef"]:
            return ProviderConfigRef

        def build(self) -> "ProviderConfigRef":
            return ProviderConfigRef(**self._attrs)

        def name(self, value: str, /) -> Self:
            """
            Name of the referenced object.
            """
            return self._set("name", value)

        @overload
        def policy(self, value_or_callback: Optional[Policy], /) -> "ProviderConfigRef.Builder": ...

        @overload
        def policy(
            self,
            value_or_callback: Callable[[Policy.Builder], Policy.Builder | Policy],
            /,
        ) -> "ProviderConfigRef.Builder": ...

        @overload
        def policy(self, value_or_callback: Never = ...) -> "Policy.BuilderContext": ...

        def policy(self, value_or_callback=None, /):
            """
            Policies for referencing.
            """
            if self._in_context and value_or_callback is None:
                context = Policy.BuilderContext()
                context._parent_builder = self
                context._field_name = "policy"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Policy.builder())
                if isinstance(output, Policy.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("policy", value)

    class BuilderContext(BuilderContextBase["ProviderConfigRef.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ProviderConfigRef.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ProviderConfigRef."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ProviderConfigRef", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ProviderConfigRef.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    name: str
    """
    Name of the referenced object.
    """
    policy: Optional[Policy] = None
    """
    Policies for referencing.
    """


class ConfigRef(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ConfigRef"]:
            return ConfigRef

        def build(self) -> "ConfigRef":
            return ConfigRef(**self._attrs)

        def name(self, value: str, /) -> Self:
            """
            Name of the referenced object.
            """
            return self._set("name", value)

        @overload
        def policy(self, value_or_callback: Optional[Policy], /) -> "ConfigRef.Builder": ...

        @overload
        def policy(
            self,
            value_or_callback: Callable[[Policy.Builder], Policy.Builder | Policy],
            /,
        ) -> "ConfigRef.Builder": ...

        @overload
        def policy(self, value_or_callback: Never = ...) -> "Policy.BuilderContext": ...

        def policy(self, value_or_callback=None, /):
            """
            Policies for referencing.
            """
            if self._in_context and value_or_callback is None:
                context = Policy.BuilderContext()
                context._parent_builder = self
                context._field_name = "policy"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Policy.builder())
                if isinstance(output, Policy.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("policy", value)

    class BuilderContext(BuilderContextBase["ConfigRef.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ConfigRef.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ConfigRef."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ConfigRef", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ConfigRef.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    name: str
    """
    Name of the referenced object.
    """
    policy: Optional[Policy] = None
    """
    Policies for referencing.
    """


class Metadata(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Metadata"]:
            return Metadata

        def build(self) -> "Metadata":
            return Metadata(**self._attrs)

        def annotations(self, value: Optional[Dict[str, str]], /) -> Self:
            """
            Annotations are the annotations to be added to connection secret.
            - For Kubernetes secrets, this will be used as "metadata.annotations".
            - It is up to Secret Store implementation for others store types.
            """
            return self._set("annotations", value)

        def labels(self, value: Optional[Dict[str, str]], /) -> Self:
            """
            Labels are the labels/tags to be added to connection secret.
            - For Kubernetes secrets, this will be used as "metadata.labels".
            - It is up to Secret Store implementation for others store types.
            """
            return self._set("labels", value)

        def type(self, value: Optional[str], /) -> Self:
            """
            Type is the SecretType for the connection secret.
            - Only valid for Kubernetes Secret Stores.
            """
            return self._set("type", value)

    class BuilderContext(BuilderContextBase["Metadata.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Metadata.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Metadata."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Metadata", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Metadata.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    annotations: Optional[Dict[str, str]] = None
    """
    Annotations are the annotations to be added to connection secret.
    - For Kubernetes secrets, this will be used as "metadata.annotations".
    - It is up to Secret Store implementation for others store types.
    """
    labels: Optional[Dict[str, str]] = None
    """
    Labels are the labels/tags to be added to connection secret.
    - For Kubernetes secrets, this will be used as "metadata.labels".
    - It is up to Secret Store implementation for others store types.
    """
    type: Optional[str] = None
    """
    Type is the SecretType for the connection secret.
    - Only valid for Kubernetes Secret Stores.
    """


class PublishConnectionDetailsTo(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["PublishConnectionDetailsTo"]:
            return PublishConnectionDetailsTo

        def build(self) -> "PublishConnectionDetailsTo":
            return PublishConnectionDetailsTo(**self._attrs)

        @overload
        def config_ref(
            self, value_or_callback: Optional[ConfigRef], /
        ) -> "PublishConnectionDetailsTo.Builder": ...

        @overload
        def config_ref(
            self,
            value_or_callback: Callable[[ConfigRef.Builder], ConfigRef.Builder | ConfigRef],
            /,
        ) -> "PublishConnectionDetailsTo.Builder": ...

        @overload
        def config_ref(self, value_or_callback: Never = ...) -> "ConfigRef.BuilderContext": ...

        def config_ref(self, value_or_callback=None, /):
            """
            SecretStoreConfigRef specifies which secret store config should be used
            for this ConnectionSecret.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigRef.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_ref"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigRef.builder())
                if isinstance(output, ConfigRef.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_ref", value)

        @overload
        def metadata(
            self, value_or_callback: Optional[Metadata], /
        ) -> "PublishConnectionDetailsTo.Builder": ...

        @overload
        def metadata(
            self,
            value_or_callback: Callable[[Metadata.Builder], Metadata.Builder | Metadata],
            /,
        ) -> "PublishConnectionDetailsTo.Builder": ...

        @overload
        def metadata(self, value_or_callback: Never = ...) -> "Metadata.BuilderContext": ...

        def metadata(self, value_or_callback=None, /):
            """
            Metadata is the metadata for connection secret.
            """
            if self._in_context and value_or_callback is None:
                context = Metadata.BuilderContext()
                context._parent_builder = self
                context._field_name = "metadata"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Metadata.builder())
                if isinstance(output, Metadata.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("metadata", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the name of the connection secret.
            """
            return self._set("name", value)

    class BuilderContext(BuilderContextBase["PublishConnectionDetailsTo.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = PublishConnectionDetailsTo.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for PublishConnectionDetailsTo."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["PublishConnectionDetailsTo", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use PublishConnectionDetailsTo.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    config_ref: Annotated[Optional[ConfigRef], Field(alias="configRef")] = {"name": "default"}
    """
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.
    """
    metadata: Optional[Metadata] = None
    """
    Metadata is the metadata for connection secret.
    """
    name: str
    """
    Name is the name of the connection secret.
    """


class WriteConnectionSecretToRef(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["WriteConnectionSecretToRef"]:
            return WriteConnectionSecretToRef

        def build(self) -> "WriteConnectionSecretToRef":
            return WriteConnectionSecretToRef(**self._attrs)

        def name(self, value: str, /) -> Self:
            """
            Name of the secret.
            """
            return self._set("name", value)

        def namespace(self, value: str, /) -> Self:
            """
            Namespace of the secret.
            """
            return self._set("namespace", value)

    class BuilderContext(BuilderContextBase["WriteConnectionSecretToRef.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = WriteConnectionSecretToRef.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for WriteConnectionSecretToRef."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["WriteConnectionSecretToRef", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use WriteConnectionSecretToRef.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    name: str
    """
    Name of the secret.
    """
    namespace: str
    """
    Namespace of the secret.
    """


class IPAssignmentSpec(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["IPAssignmentSpec"]:
            return IPAssignmentSpec

        def build(self) -> "IPAssignmentSpec":
            return IPAssignmentSpec(**self._attrs)

        def deletion_policy(self, value: Optional[Literal["Orphan", "Delete"]], /) -> Self:
            """
            DeletionPolicy specifies what will happen to the underlying external
            when this managed resource is deleted - either "Delete" or "Orphan" the
            external resource.
            This field is planned to be deprecated in favor of the ManagementPolicies
            field in a future release. Currently, both could be set independently and
            non-default values would be honored if the feature flag is enabled.
            See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
            """
            return self._set("deletion_policy", value)

        @overload
        def for_provider(self, value_or_callback: ForProvider, /) -> "IPAssignmentSpec.Builder": ...

        @overload
        def for_provider(
            self,
            value_or_callback: Callable[[ForProvider.Builder], ForProvider.Builder | ForProvider],
            /,
        ) -> "IPAssignmentSpec.Builder": ...

        @overload
        def for_provider(self, value_or_callback: Never = ...) -> "ForProvider.BuilderContext": ...

        def for_provider(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = ForProvider.BuilderContext()
                context._parent_builder = self
                context._field_name = "for_provider"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ForProvider.builder())
                if isinstance(output, ForProvider.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("for_provider", value)

        @overload
        def init_provider(
            self, value_or_callback: Optional[InitProvider], /
        ) -> "IPAssignmentSpec.Builder": ...

        @overload
        def init_provider(
            self,
            value_or_callback: Callable[
                [InitProvider.Builder], InitProvider.Builder | InitProvider
            ],
            /,
        ) -> "IPAssignmentSpec.Builder": ...

        @overload
        def init_provider(
            self, value_or_callback: Never = ...
        ) -> "InitProvider.BuilderContext": ...

        def init_provider(self, value_or_callback=None, /):
            """
            THIS IS A BETA FIELD. It will be honored
            unless the Management Policies feature flag is disabled.
            InitProvider holds the same fields as ForProvider, with the exception
            of Identifier and other resource reference fields. The fields that are
            in InitProvider are merged into ForProvider when the resource is created.
            The same fields are also added to the terraform ignore_changes hook, to
            avoid updating them after creation. This is useful for fields that are
            required on creation, but we do not desire to update them after creation,
            for example because of an external controller is managing them, like an
            autoscaler.
            """
            if self._in_context and value_or_callback is None:
                context = InitProvider.BuilderContext()
                context._parent_builder = self
                context._field_name = "init_provider"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(InitProvider.builder())
                if isinstance(output, InitProvider.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("init_provider", value)

        def management_policies(
            self,
            value: Optional[
                List[Literal["Observe", "Create", "Update", "Delete", "LateInitialize", "*"]]
            ],
            /,
        ) -> Self:
            """
            THIS IS A BETA FIELD. It is on by default but can be opted out
            through a Crossplane feature flag.
            ManagementPolicies specify the array of actions Crossplane is allowed to
            take on the managed and external resources.
            This field is planned to replace the DeletionPolicy field in a future
            release. Currently, both could be set independently and non-default
            values would be honored if the feature flag is enabled. If both are
            custom, the DeletionPolicy field will be ignored.
            See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
            and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
            """
            return self._set("management_policies", value)

        @overload
        def provider_config_ref(
            self, value_or_callback: Optional[ProviderConfigRef], /
        ) -> "IPAssignmentSpec.Builder": ...

        @overload
        def provider_config_ref(
            self,
            value_or_callback: Callable[
                [ProviderConfigRef.Builder],
                ProviderConfigRef.Builder | ProviderConfigRef,
            ],
            /,
        ) -> "IPAssignmentSpec.Builder": ...

        @overload
        def provider_config_ref(
            self, value_or_callback: Never = ...
        ) -> "ProviderConfigRef.BuilderContext": ...

        def provider_config_ref(self, value_or_callback=None, /):
            """
            ProviderConfigReference specifies how the provider that will be used to
            create, observe, update, and delete this managed resource should be
            configured.
            """
            if self._in_context and value_or_callback is None:
                context = ProviderConfigRef.BuilderContext()
                context._parent_builder = self
                context._field_name = "provider_config_ref"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ProviderConfigRef.builder())
                if isinstance(output, ProviderConfigRef.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("provider_config_ref", value)

        @overload
        def publish_connection_details_to(
            self, value_or_callback: Optional[PublishConnectionDetailsTo], /
        ) -> "IPAssignmentSpec.Builder": ...

        @overload
        def publish_connection_details_to(
            self,
            value_or_callback: Callable[
                [PublishConnectionDetailsTo.Builder],
                PublishConnectionDetailsTo.Builder | PublishConnectionDetailsTo,
            ],
            /,
        ) -> "IPAssignmentSpec.Builder": ...

        @overload
        def publish_connection_details_to(
            self, value_or_callback: Never = ...
        ) -> "PublishConnectionDetailsTo.BuilderContext": ...

        def publish_connection_details_to(self, value_or_callback=None, /):
            """
            PublishConnectionDetailsTo specifies the connection secret config which
            contains a name, metadata and a reference to secret store config to
            which any connection details for this managed resource should be written.
            Connection details frequently include the endpoint, username,
            and password required to connect to the managed resource.
            """
            if self._in_context and value_or_callback is None:
                context = PublishConnectionDetailsTo.BuilderContext()
                context._parent_builder = self
                context._field_name = "publish_connection_details_to"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(PublishConnectionDetailsTo.builder())
                if isinstance(output, PublishConnectionDetailsTo.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("publish_connection_details_to", value)

        @overload
        def write_connection_secret_to_ref(
            self, value_or_callback: Optional[WriteConnectionSecretToRef], /
        ) -> "IPAssignmentSpec.Builder": ...

        @overload
        def write_connection_secret_to_ref(
            self,
            value_or_callback: Callable[
                [WriteConnectionSecretToRef.Builder],
                WriteConnectionSecretToRef.Builder | WriteConnectionSecretToRef,
            ],
            /,
        ) -> "IPAssignmentSpec.Builder": ...

        @overload
        def write_connection_secret_to_ref(
            self, value_or_callback: Never = ...
        ) -> "WriteConnectionSecretToRef.BuilderContext": ...

        def write_connection_secret_to_ref(self, value_or_callback=None, /):
            """
            WriteConnectionSecretToReference specifies the namespace and name of a
            Secret to which any connection details for this managed resource should
            be written. Connection details frequently include the endpoint, username,
            and password required to connect to the managed resource.
            This field is planned to be replaced in a future release in favor of
            PublishConnectionDetailsTo. Currently, both could be set independently
            and connection details would be published to both without affecting
            each other.
            """
            if self._in_context and value_or_callback is None:
                context = WriteConnectionSecretToRef.BuilderContext()
                context._parent_builder = self
                context._field_name = "write_connection_secret_to_ref"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(WriteConnectionSecretToRef.builder())
                if isinstance(output, WriteConnectionSecretToRef.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("write_connection_secret_to_ref", value)

    class BuilderContext(BuilderContextBase["IPAssignmentSpec.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = IPAssignmentSpec.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for IPAssignmentSpec."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["IPAssignmentSpec", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use IPAssignmentSpec.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    deletion_policy: Annotated[
        Optional[Literal["Orphan", "Delete"]], Field(alias="deletionPolicy")
    ] = "Delete"
    """
    DeletionPolicy specifies what will happen to the underlying external
    when this managed resource is deleted - either "Delete" or "Orphan" the
    external resource.
    This field is planned to be deprecated in favor of the ManagementPolicies
    field in a future release. Currently, both could be set independently and
    non-default values would be honored if the feature flag is enabled.
    See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    """
    for_provider: Annotated[ForProvider, Field(alias="forProvider")]
    init_provider: Annotated[Optional[InitProvider], Field(alias="initProvider")] = None
    """
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.
    """
    management_policies: Annotated[
        Optional[List[Literal["Observe", "Create", "Update", "Delete", "LateInitialize", "*"]]],
        Field(alias="managementPolicies"),
    ] = ["*"]
    """
    THIS IS A BETA FIELD. It is on by default but can be opted out
    through a Crossplane feature flag.
    ManagementPolicies specify the array of actions Crossplane is allowed to
    take on the managed and external resources.
    This field is planned to replace the DeletionPolicy field in a future
    release. Currently, both could be set independently and non-default
    values would be honored if the feature flag is enabled. If both are
    custom, the DeletionPolicy field will be ignored.
    See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    """
    provider_config_ref: Annotated[
        Optional[ProviderConfigRef], Field(alias="providerConfigRef")
    ] = {"name": "default"}
    """
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.
    """
    publish_connection_details_to: Annotated[
        Optional[PublishConnectionDetailsTo], Field(alias="publishConnectionDetailsTo")
    ] = None
    """
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    """
    write_connection_secret_to_ref: Annotated[
        Optional[WriteConnectionSecretToRef], Field(alias="writeConnectionSecretToRef")
    ] = None
    """
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.
    """


class AtProvider(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AtProvider"]:
            return AtProvider

        def build(self) -> "AtProvider":
            return AtProvider(**self._attrs)

        def droplet_id(self, value: Optional[float], /) -> Self:
            """
            The ID of Droplet that the reserved IP will be assigned to.
            """
            return self._set("droplet_id", value)

        def id(self, value: Optional[str], /) -> Self:
            return self._set("id", value)

        def ip_address(self, value: Optional[str], /) -> Self:
            """
            The reserved IP to assign to the Droplet.
            """
            return self._set("ip_address", value)

    class BuilderContext(BuilderContextBase["AtProvider.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AtProvider.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AtProvider."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AtProvider", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AtProvider.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    droplet_id: Annotated[Optional[float], Field(alias="dropletId")] = None
    """
    The ID of Droplet that the reserved IP will be assigned to.
    """
    id: Optional[str] = None
    ip_address: Annotated[Optional[str], Field(alias="ipAddress")] = None
    """
    The reserved IP to assign to the Droplet.
    """


class Condition(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Condition"]:
            return Condition

        def build(self) -> "Condition":
            return Condition(**self._attrs)

        def last_transition_time(self, value: datetime, /) -> Self:
            """
            LastTransitionTime is the last time this condition transitioned from one
            status to another.
            """
            return self._set("last_transition_time", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            A Message containing details about this condition's last transition from
            one status to another, if any.
            """
            return self._set("message", value)

        def observed_generation(self, value: Optional[int], /) -> Self:
            """
            ObservedGeneration represents the .metadata.generation that the condition was set based upon.
            For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
            with respect to the current state of the instance.
            """
            return self._set("observed_generation", value)

        def reason(self, value: str, /) -> Self:
            """
            A Reason for this condition's last transition from one status to another.
            """
            return self._set("reason", value)

        def status(self, value: str, /) -> Self:
            """
            Status of this condition; is it currently True, False, or Unknown?
            """
            return self._set("status", value)

        def type(self, value: str, /) -> Self:
            """
            Type of this condition. At most one of each condition type may apply to
            a resource at any point in time.
            """
            return self._set("type", value)

    class BuilderContext(BuilderContextBase["Condition.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Condition.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Condition."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Condition", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Condition.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    last_transition_time: Annotated[datetime, Field(alias="lastTransitionTime")]
    """
    LastTransitionTime is the last time this condition transitioned from one
    status to another.
    """
    message: Optional[str] = None
    """
    A Message containing details about this condition's last transition from
    one status to another, if any.
    """
    observed_generation: Annotated[Optional[int], Field(alias="observedGeneration")] = None
    """
    ObservedGeneration represents the .metadata.generation that the condition was set based upon.
    For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
    with respect to the current state of the instance.
    """
    reason: str
    """
    A Reason for this condition's last transition from one status to another.
    """
    status: str
    """
    Status of this condition; is it currently True, False, or Unknown?
    """
    type: str
    """
    Type of this condition. At most one of each condition type may apply to
    a resource at any point in time.
    """


class IPAssignmentStatus(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["IPAssignmentStatus"]:
            return IPAssignmentStatus

        def build(self) -> "IPAssignmentStatus":
            return IPAssignmentStatus(**self._attrs)

        @overload
        def at_provider(
            self, value_or_callback: Optional[AtProvider], /
        ) -> "IPAssignmentStatus.Builder": ...

        @overload
        def at_provider(
            self,
            value_or_callback: Callable[[AtProvider.Builder], AtProvider.Builder | AtProvider],
            /,
        ) -> "IPAssignmentStatus.Builder": ...

        @overload
        def at_provider(self, value_or_callback: Never = ...) -> "AtProvider.BuilderContext": ...

        def at_provider(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = AtProvider.BuilderContext()
                context._parent_builder = self
                context._field_name = "at_provider"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AtProvider.builder())
                if isinstance(output, AtProvider.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("at_provider", value)

        @overload
        def conditions(
            self, value_or_callback: List[Condition], /
        ) -> "IPAssignmentStatus.Builder": ...

        @overload
        def conditions(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Condition, Condition.Builder]],
                GenericListBuilder[Condition, Condition.Builder] | List[Condition],
            ],
            /,
        ) -> "IPAssignmentStatus.Builder": ...

        @overload
        def conditions(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Condition.Builder]: ...

        def conditions(self, value_or_callback=None, /):
            """
            Conditions of the resource.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Condition.Builder]()
                context._parent_builder = self
                context._field_name = "conditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Condition.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("conditions", value)

        def observed_generation(self, value: Optional[int], /) -> Self:
            """
            ObservedGeneration is the latest metadata.generation
            which resulted in either a ready state, or stalled due to error
            it can not recover from without human intervention.
            """
            return self._set("observed_generation", value)

    class BuilderContext(BuilderContextBase["IPAssignmentStatus.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = IPAssignmentStatus.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for IPAssignmentStatus."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["IPAssignmentStatus", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use IPAssignmentStatus.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    at_provider: Annotated[Optional[AtProvider], Field(alias="atProvider")] = None
    conditions: Optional[List[Condition]] = None
    """
    Conditions of the resource.
    """
    observed_generation: Annotated[Optional[int], Field(alias="observedGeneration")] = None
    """
    ObservedGeneration is the latest metadata.generation
    which resulted in either a ready state, or stalled due to error
    it can not recover from without human intervention.
    """


class ForProviderModel(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ForProviderModel"]:
            return ForProviderModel

        def build(self) -> "ForProviderModel":
            return ForProviderModel(**self._attrs)

        def droplet_id(self, value: Optional[float], /) -> Self:
            """
            The ID of Droplet that the reserved IP will be assigned to.
            """
            return self._set("droplet_id", value)

        @overload
        def droplet_id_ref(
            self, value_or_callback: Optional[DropletIdRef], /
        ) -> "ForProviderModel.Builder": ...

        @overload
        def droplet_id_ref(
            self,
            value_or_callback: Callable[
                [DropletIdRef.Builder], DropletIdRef.Builder | DropletIdRef
            ],
            /,
        ) -> "ForProviderModel.Builder": ...

        @overload
        def droplet_id_ref(
            self, value_or_callback: Never = ...
        ) -> "DropletIdRef.BuilderContext": ...

        def droplet_id_ref(self, value_or_callback=None, /):
            """
            Reference to a Droplet in droplet to populate dropletId.
            """
            if self._in_context and value_or_callback is None:
                context = DropletIdRef.BuilderContext()
                context._parent_builder = self
                context._field_name = "droplet_id_ref"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(DropletIdRef.builder())
                if isinstance(output, DropletIdRef.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("droplet_id_ref", value)

        @overload
        def droplet_id_selector(
            self, value_or_callback: Optional[DropletIdSelector], /
        ) -> "ForProviderModel.Builder": ...

        @overload
        def droplet_id_selector(
            self,
            value_or_callback: Callable[
                [DropletIdSelector.Builder],
                DropletIdSelector.Builder | DropletIdSelector,
            ],
            /,
        ) -> "ForProviderModel.Builder": ...

        @overload
        def droplet_id_selector(
            self, value_or_callback: Never = ...
        ) -> "DropletIdSelector.BuilderContext": ...

        def droplet_id_selector(self, value_or_callback=None, /):
            """
            Selector for a Droplet in droplet to populate dropletId.
            """
            if self._in_context and value_or_callback is None:
                context = DropletIdSelector.BuilderContext()
                context._parent_builder = self
                context._field_name = "droplet_id_selector"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(DropletIdSelector.builder())
                if isinstance(output, DropletIdSelector.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("droplet_id_selector", value)

        def ip_address(self, value: Optional[str], /) -> Self:
            """
            The IP Address of the resource
            """
            return self._set("ip_address", value)

        def region(self, value: Optional[str], /) -> Self:
            """
            The region that the reserved IP is reserved to.
            """
            return self._set("region", value)

    class BuilderContext(BuilderContextBase["ForProviderModel.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ForProviderModel.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ForProviderModel."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ForProviderModel", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ForProviderModel.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    droplet_id: Annotated[Optional[float], Field(alias="dropletId")] = None
    """
    The ID of Droplet that the reserved IP will be assigned to.
    """
    droplet_id_ref: Annotated[Optional[DropletIdRef], Field(alias="dropletIdRef")] = None
    """
    Reference to a Droplet in droplet to populate dropletId.
    """
    droplet_id_selector: Annotated[
        Optional[DropletIdSelector], Field(alias="dropletIdSelector")
    ] = None
    """
    Selector for a Droplet in droplet to populate dropletId.
    """
    ip_address: Annotated[Optional[str], Field(alias="ipAddress")] = None
    """
    The IP Address of the resource
    """
    region: Optional[str] = None
    """
    The region that the reserved IP is reserved to.
    """


class InitProviderModel(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["InitProviderModel"]:
            return InitProviderModel

        def build(self) -> "InitProviderModel":
            return InitProviderModel(**self._attrs)

        def droplet_id(self, value: Optional[float], /) -> Self:
            """
            The ID of Droplet that the reserved IP will be assigned to.
            """
            return self._set("droplet_id", value)

        @overload
        def droplet_id_ref(
            self, value_or_callback: Optional[DropletIdRef], /
        ) -> "InitProviderModel.Builder": ...

        @overload
        def droplet_id_ref(
            self,
            value_or_callback: Callable[
                [DropletIdRef.Builder], DropletIdRef.Builder | DropletIdRef
            ],
            /,
        ) -> "InitProviderModel.Builder": ...

        @overload
        def droplet_id_ref(
            self, value_or_callback: Never = ...
        ) -> "DropletIdRef.BuilderContext": ...

        def droplet_id_ref(self, value_or_callback=None, /):
            """
            Reference to a Droplet in droplet to populate dropletId.
            """
            if self._in_context and value_or_callback is None:
                context = DropletIdRef.BuilderContext()
                context._parent_builder = self
                context._field_name = "droplet_id_ref"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(DropletIdRef.builder())
                if isinstance(output, DropletIdRef.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("droplet_id_ref", value)

        @overload
        def droplet_id_selector(
            self, value_or_callback: Optional[DropletIdSelector], /
        ) -> "InitProviderModel.Builder": ...

        @overload
        def droplet_id_selector(
            self,
            value_or_callback: Callable[
                [DropletIdSelector.Builder],
                DropletIdSelector.Builder | DropletIdSelector,
            ],
            /,
        ) -> "InitProviderModel.Builder": ...

        @overload
        def droplet_id_selector(
            self, value_or_callback: Never = ...
        ) -> "DropletIdSelector.BuilderContext": ...

        def droplet_id_selector(self, value_or_callback=None, /):
            """
            Selector for a Droplet in droplet to populate dropletId.
            """
            if self._in_context and value_or_callback is None:
                context = DropletIdSelector.BuilderContext()
                context._parent_builder = self
                context._field_name = "droplet_id_selector"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(DropletIdSelector.builder())
                if isinstance(output, DropletIdSelector.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("droplet_id_selector", value)

        def ip_address(self, value: Optional[str], /) -> Self:
            """
            The IP Address of the resource
            """
            return self._set("ip_address", value)

        def region(self, value: Optional[str], /) -> Self:
            """
            The region that the reserved IP is reserved to.
            """
            return self._set("region", value)

    class BuilderContext(BuilderContextBase["InitProviderModel.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = InitProviderModel.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for InitProviderModel."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["InitProviderModel", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use InitProviderModel.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    droplet_id: Annotated[Optional[float], Field(alias="dropletId")] = None
    """
    The ID of Droplet that the reserved IP will be assigned to.
    """
    droplet_id_ref: Annotated[Optional[DropletIdRef], Field(alias="dropletIdRef")] = None
    """
    Reference to a Droplet in droplet to populate dropletId.
    """
    droplet_id_selector: Annotated[
        Optional[DropletIdSelector], Field(alias="dropletIdSelector")
    ] = None
    """
    Selector for a Droplet in droplet to populate dropletId.
    """
    ip_address: Annotated[Optional[str], Field(alias="ipAddress")] = None
    """
    The IP Address of the resource
    """
    region: Optional[str] = None
    """
    The region that the reserved IP is reserved to.
    """


class IPSpec(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["IPSpec"]:
            return IPSpec

        def build(self) -> "IPSpec":
            return IPSpec(**self._attrs)

        def deletion_policy(self, value: Optional[Literal["Orphan", "Delete"]], /) -> Self:
            """
            DeletionPolicy specifies what will happen to the underlying external
            when this managed resource is deleted - either "Delete" or "Orphan" the
            external resource.
            This field is planned to be deprecated in favor of the ManagementPolicies
            field in a future release. Currently, both could be set independently and
            non-default values would be honored if the feature flag is enabled.
            See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
            """
            return self._set("deletion_policy", value)

        @overload
        def for_provider(self, value_or_callback: ForProviderModel, /) -> "IPSpec.Builder": ...

        @overload
        def for_provider(
            self,
            value_or_callback: Callable[
                [ForProviderModel.Builder], ForProviderModel.Builder | ForProviderModel
            ],
            /,
        ) -> "IPSpec.Builder": ...

        @overload
        def for_provider(
            self, value_or_callback: Never = ...
        ) -> "ForProviderModel.BuilderContext": ...

        def for_provider(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = ForProviderModel.BuilderContext()
                context._parent_builder = self
                context._field_name = "for_provider"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ForProviderModel.builder())
                if isinstance(output, ForProviderModel.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("for_provider", value)

        @overload
        def init_provider(
            self, value_or_callback: Optional[InitProviderModel], /
        ) -> "IPSpec.Builder": ...

        @overload
        def init_provider(
            self,
            value_or_callback: Callable[
                [InitProviderModel.Builder],
                InitProviderModel.Builder | InitProviderModel,
            ],
            /,
        ) -> "IPSpec.Builder": ...

        @overload
        def init_provider(
            self, value_or_callback: Never = ...
        ) -> "InitProviderModel.BuilderContext": ...

        def init_provider(self, value_or_callback=None, /):
            """
            THIS IS A BETA FIELD. It will be honored
            unless the Management Policies feature flag is disabled.
            InitProvider holds the same fields as ForProvider, with the exception
            of Identifier and other resource reference fields. The fields that are
            in InitProvider are merged into ForProvider when the resource is created.
            The same fields are also added to the terraform ignore_changes hook, to
            avoid updating them after creation. This is useful for fields that are
            required on creation, but we do not desire to update them after creation,
            for example because of an external controller is managing them, like an
            autoscaler.
            """
            if self._in_context and value_or_callback is None:
                context = InitProviderModel.BuilderContext()
                context._parent_builder = self
                context._field_name = "init_provider"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(InitProviderModel.builder())
                if isinstance(output, InitProviderModel.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("init_provider", value)

        def management_policies(
            self,
            value: Optional[
                List[Literal["Observe", "Create", "Update", "Delete", "LateInitialize", "*"]]
            ],
            /,
        ) -> Self:
            """
            THIS IS A BETA FIELD. It is on by default but can be opted out
            through a Crossplane feature flag.
            ManagementPolicies specify the array of actions Crossplane is allowed to
            take on the managed and external resources.
            This field is planned to replace the DeletionPolicy field in a future
            release. Currently, both could be set independently and non-default
            values would be honored if the feature flag is enabled. If both are
            custom, the DeletionPolicy field will be ignored.
            See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
            and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
            """
            return self._set("management_policies", value)

        @overload
        def provider_config_ref(
            self, value_or_callback: Optional[ProviderConfigRef], /
        ) -> "IPSpec.Builder": ...

        @overload
        def provider_config_ref(
            self,
            value_or_callback: Callable[
                [ProviderConfigRef.Builder],
                ProviderConfigRef.Builder | ProviderConfigRef,
            ],
            /,
        ) -> "IPSpec.Builder": ...

        @overload
        def provider_config_ref(
            self, value_or_callback: Never = ...
        ) -> "ProviderConfigRef.BuilderContext": ...

        def provider_config_ref(self, value_or_callback=None, /):
            """
            ProviderConfigReference specifies how the provider that will be used to
            create, observe, update, and delete this managed resource should be
            configured.
            """
            if self._in_context and value_or_callback is None:
                context = ProviderConfigRef.BuilderContext()
                context._parent_builder = self
                context._field_name = "provider_config_ref"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ProviderConfigRef.builder())
                if isinstance(output, ProviderConfigRef.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("provider_config_ref", value)

        @overload
        def publish_connection_details_to(
            self, value_or_callback: Optional[PublishConnectionDetailsTo], /
        ) -> "IPSpec.Builder": ...

        @overload
        def publish_connection_details_to(
            self,
            value_or_callback: Callable[
                [PublishConnectionDetailsTo.Builder],
                PublishConnectionDetailsTo.Builder | PublishConnectionDetailsTo,
            ],
            /,
        ) -> "IPSpec.Builder": ...

        @overload
        def publish_connection_details_to(
            self, value_or_callback: Never = ...
        ) -> "PublishConnectionDetailsTo.BuilderContext": ...

        def publish_connection_details_to(self, value_or_callback=None, /):
            """
            PublishConnectionDetailsTo specifies the connection secret config which
            contains a name, metadata and a reference to secret store config to
            which any connection details for this managed resource should be written.
            Connection details frequently include the endpoint, username,
            and password required to connect to the managed resource.
            """
            if self._in_context and value_or_callback is None:
                context = PublishConnectionDetailsTo.BuilderContext()
                context._parent_builder = self
                context._field_name = "publish_connection_details_to"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(PublishConnectionDetailsTo.builder())
                if isinstance(output, PublishConnectionDetailsTo.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("publish_connection_details_to", value)

        @overload
        def write_connection_secret_to_ref(
            self, value_or_callback: Optional[WriteConnectionSecretToRef], /
        ) -> "IPSpec.Builder": ...

        @overload
        def write_connection_secret_to_ref(
            self,
            value_or_callback: Callable[
                [WriteConnectionSecretToRef.Builder],
                WriteConnectionSecretToRef.Builder | WriteConnectionSecretToRef,
            ],
            /,
        ) -> "IPSpec.Builder": ...

        @overload
        def write_connection_secret_to_ref(
            self, value_or_callback: Never = ...
        ) -> "WriteConnectionSecretToRef.BuilderContext": ...

        def write_connection_secret_to_ref(self, value_or_callback=None, /):
            """
            WriteConnectionSecretToReference specifies the namespace and name of a
            Secret to which any connection details for this managed resource should
            be written. Connection details frequently include the endpoint, username,
            and password required to connect to the managed resource.
            This field is planned to be replaced in a future release in favor of
            PublishConnectionDetailsTo. Currently, both could be set independently
            and connection details would be published to both without affecting
            each other.
            """
            if self._in_context and value_or_callback is None:
                context = WriteConnectionSecretToRef.BuilderContext()
                context._parent_builder = self
                context._field_name = "write_connection_secret_to_ref"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(WriteConnectionSecretToRef.builder())
                if isinstance(output, WriteConnectionSecretToRef.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("write_connection_secret_to_ref", value)

    class BuilderContext(BuilderContextBase["IPSpec.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = IPSpec.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for IPSpec."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["IPSpec", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use IPSpec.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    deletion_policy: Annotated[
        Optional[Literal["Orphan", "Delete"]], Field(alias="deletionPolicy")
    ] = "Delete"
    """
    DeletionPolicy specifies what will happen to the underlying external
    when this managed resource is deleted - either "Delete" or "Orphan" the
    external resource.
    This field is planned to be deprecated in favor of the ManagementPolicies
    field in a future release. Currently, both could be set independently and
    non-default values would be honored if the feature flag is enabled.
    See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    """
    for_provider: Annotated[ForProviderModel, Field(alias="forProvider")]
    init_provider: Annotated[Optional[InitProviderModel], Field(alias="initProvider")] = None
    """
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.
    """
    management_policies: Annotated[
        Optional[List[Literal["Observe", "Create", "Update", "Delete", "LateInitialize", "*"]]],
        Field(alias="managementPolicies"),
    ] = ["*"]
    """
    THIS IS A BETA FIELD. It is on by default but can be opted out
    through a Crossplane feature flag.
    ManagementPolicies specify the array of actions Crossplane is allowed to
    take on the managed and external resources.
    This field is planned to replace the DeletionPolicy field in a future
    release. Currently, both could be set independently and non-default
    values would be honored if the feature flag is enabled. If both are
    custom, the DeletionPolicy field will be ignored.
    See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    """
    provider_config_ref: Annotated[
        Optional[ProviderConfigRef], Field(alias="providerConfigRef")
    ] = {"name": "default"}
    """
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.
    """
    publish_connection_details_to: Annotated[
        Optional[PublishConnectionDetailsTo], Field(alias="publishConnectionDetailsTo")
    ] = None
    """
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    """
    write_connection_secret_to_ref: Annotated[
        Optional[WriteConnectionSecretToRef], Field(alias="writeConnectionSecretToRef")
    ] = None
    """
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.
    """


class AtProviderModel(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AtProviderModel"]:
            return AtProviderModel

        def build(self) -> "AtProviderModel":
            return AtProviderModel(**self._attrs)

        def droplet_id(self, value: Optional[float], /) -> Self:
            """
            The ID of Droplet that the reserved IP will be assigned to.
            """
            return self._set("droplet_id", value)

        def id(self, value: Optional[str], /) -> Self:
            return self._set("id", value)

        def ip_address(self, value: Optional[str], /) -> Self:
            """
            The IP Address of the resource
            """
            return self._set("ip_address", value)

        def region(self, value: Optional[str], /) -> Self:
            """
            The region that the reserved IP is reserved to.
            """
            return self._set("region", value)

        def urn(self, value: Optional[str], /) -> Self:
            """
            The uniform resource name of the reserved ip
            the uniform resource name for the reserved ip
            """
            return self._set("urn", value)

    class BuilderContext(BuilderContextBase["AtProviderModel.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AtProviderModel.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AtProviderModel."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AtProviderModel", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AtProviderModel.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    droplet_id: Annotated[Optional[float], Field(alias="dropletId")] = None
    """
    The ID of Droplet that the reserved IP will be assigned to.
    """
    id: Optional[str] = None
    ip_address: Annotated[Optional[str], Field(alias="ipAddress")] = None
    """
    The IP Address of the resource
    """
    region: Optional[str] = None
    """
    The region that the reserved IP is reserved to.
    """
    urn: Optional[str] = None
    """
    The uniform resource name of the reserved ip
    the uniform resource name for the reserved ip
    """


class IPStatus(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["IPStatus"]:
            return IPStatus

        def build(self) -> "IPStatus":
            return IPStatus(**self._attrs)

        @overload
        def at_provider(
            self, value_or_callback: Optional[AtProviderModel], /
        ) -> "IPStatus.Builder": ...

        @overload
        def at_provider(
            self,
            value_or_callback: Callable[
                [AtProviderModel.Builder], AtProviderModel.Builder | AtProviderModel
            ],
            /,
        ) -> "IPStatus.Builder": ...

        @overload
        def at_provider(
            self, value_or_callback: Never = ...
        ) -> "AtProviderModel.BuilderContext": ...

        def at_provider(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = AtProviderModel.BuilderContext()
                context._parent_builder = self
                context._field_name = "at_provider"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AtProviderModel.builder())
                if isinstance(output, AtProviderModel.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("at_provider", value)

        @overload
        def conditions(self, value_or_callback: List[Condition], /) -> "IPStatus.Builder": ...

        @overload
        def conditions(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Condition, Condition.Builder]],
                GenericListBuilder[Condition, Condition.Builder] | List[Condition],
            ],
            /,
        ) -> "IPStatus.Builder": ...

        @overload
        def conditions(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Condition.Builder]: ...

        def conditions(self, value_or_callback=None, /):
            """
            Conditions of the resource.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Condition.Builder]()
                context._parent_builder = self
                context._field_name = "conditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Condition.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("conditions", value)

        def observed_generation(self, value: Optional[int], /) -> Self:
            """
            ObservedGeneration is the latest metadata.generation
            which resulted in either a ready state, or stalled due to error
            it can not recover from without human intervention.
            """
            return self._set("observed_generation", value)

    class BuilderContext(BuilderContextBase["IPStatus.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = IPStatus.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for IPStatus."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["IPStatus", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use IPStatus.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    at_provider: Annotated[Optional[AtProviderModel], Field(alias="atProvider")] = None
    conditions: Optional[List[Condition]] = None
    """
    Conditions of the resource.
    """
    observed_generation: Annotated[Optional[int], Field(alias="observedGeneration")] = None
    """
    ObservedGeneration is the latest metadata.generation
    which resulted in either a ready state, or stalled due to error
    it can not recover from without human intervention.
    """


class IPAssignment(Resource):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["IPAssignment"]:
            return IPAssignment

        def build(self) -> "IPAssignment":
            return IPAssignment(**self._attrs)

        def api_version(
            self,
            value: Optional[Literal["networking.digitalocean.crossplane.io/v1alpha1"]],
            /,
        ) -> Self:
            """
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and
            may reject unrecognized values.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            """
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["IPAssignment"]], /) -> Self:
            """
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to.
            Cannot be updated.
            In CamelCase.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            """
            return self._set("kind", value)

        @overload
        def metadata(
            self, value_or_callback: Optional[v1.ObjectMeta], /
        ) -> "IPAssignment.Builder": ...

        @overload
        def metadata(
            self,
            value_or_callback: Callable[
                [v1.ObjectMeta.Builder], v1.ObjectMeta.Builder | v1.ObjectMeta
            ],
            /,
        ) -> "IPAssignment.Builder": ...

        @overload
        def metadata(self, value_or_callback: Never = ...) -> "v1.ObjectMeta.BuilderContext": ...

        def metadata(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = v1.ObjectMeta.BuilderContext()
                context._parent_builder = self
                context._field_name = "metadata"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(v1.ObjectMeta.builder())
                if isinstance(output, v1.ObjectMeta.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("metadata", value)

        @overload
        def spec(self, value_or_callback: IPAssignmentSpec, /) -> "IPAssignment.Builder": ...

        @overload
        def spec(
            self,
            value_or_callback: Callable[
                [IPAssignmentSpec.Builder], IPAssignmentSpec.Builder | IPAssignmentSpec
            ],
            /,
        ) -> "IPAssignment.Builder": ...

        @overload
        def spec(self, value_or_callback: Never = ...) -> "IPAssignmentSpec.BuilderContext": ...

        def spec(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = IPAssignmentSpec.BuilderContext()
                context._parent_builder = self
                context._field_name = "spec"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(IPAssignmentSpec.builder())
                if isinstance(output, IPAssignmentSpec.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("spec", value)

        @overload
        def status(
            self, value_or_callback: Optional[IPAssignmentStatus], /
        ) -> "IPAssignment.Builder": ...

        @overload
        def status(
            self,
            value_or_callback: Callable[
                [IPAssignmentStatus.Builder],
                IPAssignmentStatus.Builder | IPAssignmentStatus,
            ],
            /,
        ) -> "IPAssignment.Builder": ...

        @overload
        def status(self, value_or_callback: Never = ...) -> "IPAssignmentStatus.BuilderContext": ...

        def status(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = IPAssignmentStatus.BuilderContext()
                context._parent_builder = self
                context._field_name = "status"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(IPAssignmentStatus.builder())
                if isinstance(output, IPAssignmentStatus.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("status", value)

    class BuilderContext(BuilderContextBase["IPAssignment.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = IPAssignment.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for IPAssignment."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["IPAssignment", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use IPAssignment.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[
        Optional[Literal["networking.digitalocean.crossplane.io/v1alpha1"]],
        Field(alias="apiVersion"),
    ] = "networking.digitalocean.crossplane.io/v1alpha1"
    """
    APIVersion defines the versioned schema of this representation of an object.
    Servers should convert recognized schemas to the latest internal value, and
    may reject unrecognized values.
    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[Literal["IPAssignment"]] = "IPAssignment"
    """
    Kind is a string value representing the REST resource this object represents.
    Servers may infer this from the endpoint the client submits requests to.
    Cannot be updated.
    In CamelCase.
    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[v1.ObjectMeta] = None
    spec: IPAssignmentSpec
    status: Optional[IPAssignmentStatus] = None


class IP(Resource):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["IP"]:
            return IP

        def build(self) -> "IP":
            return IP(**self._attrs)

        def api_version(
            self,
            value: Optional[Literal["networking.digitalocean.crossplane.io/v1alpha1"]],
            /,
        ) -> Self:
            """
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and
            may reject unrecognized values.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            """
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["IP"]], /) -> Self:
            """
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to.
            Cannot be updated.
            In CamelCase.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            """
            return self._set("kind", value)

        @overload
        def metadata(self, value_or_callback: Optional[v1.ObjectMeta], /) -> "IP.Builder": ...

        @overload
        def metadata(
            self,
            value_or_callback: Callable[
                [v1.ObjectMeta.Builder], v1.ObjectMeta.Builder | v1.ObjectMeta
            ],
            /,
        ) -> "IP.Builder": ...

        @overload
        def metadata(self, value_or_callback: Never = ...) -> "v1.ObjectMeta.BuilderContext": ...

        def metadata(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = v1.ObjectMeta.BuilderContext()
                context._parent_builder = self
                context._field_name = "metadata"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(v1.ObjectMeta.builder())
                if isinstance(output, v1.ObjectMeta.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("metadata", value)

        @overload
        def spec(self, value_or_callback: IPSpec, /) -> "IP.Builder": ...

        @overload
        def spec(
            self,
            value_or_callback: Callable[[IPSpec.Builder], IPSpec.Builder | IPSpec],
            /,
        ) -> "IP.Builder": ...

        @overload
        def spec(self, value_or_callback: Never = ...) -> "IPSpec.BuilderContext": ...

        def spec(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = IPSpec.BuilderContext()
                context._parent_builder = self
                context._field_name = "spec"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(IPSpec.builder())
                if isinstance(output, IPSpec.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("spec", value)

        @overload
        def status(self, value_or_callback: Optional[IPStatus], /) -> "IP.Builder": ...

        @overload
        def status(
            self,
            value_or_callback: Callable[[IPStatus.Builder], IPStatus.Builder | IPStatus],
            /,
        ) -> "IP.Builder": ...

        @overload
        def status(self, value_or_callback: Never = ...) -> "IPStatus.BuilderContext": ...

        def status(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = IPStatus.BuilderContext()
                context._parent_builder = self
                context._field_name = "status"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(IPStatus.builder())
                if isinstance(output, IPStatus.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("status", value)

    class BuilderContext(BuilderContextBase["IP.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = IP.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for IP."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["IP", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use IP.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[
        Optional[Literal["networking.digitalocean.crossplane.io/v1alpha1"]],
        Field(alias="apiVersion"),
    ] = "networking.digitalocean.crossplane.io/v1alpha1"
    """
    APIVersion defines the versioned schema of this representation of an object.
    Servers should convert recognized schemas to the latest internal value, and
    may reject unrecognized values.
    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[Literal["IP"]] = "IP"
    """
    Kind is a string value representing the REST resource this object represents.
    Servers may infer this from the endpoint the client submits requests to.
    Cannot be updated.
    In CamelCase.
    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[v1.ObjectMeta] = None
    spec: IPSpec
    status: Optional[IPStatus] = None
