# Generated by cloudcoil-model-codegen v0.5.8
# DO NOT EDIT

from __future__ import annotations

from datetime import datetime
from typing import (
    Annotated,
    Callable,
    Dict,
    List,
    Literal,
    Optional,
    Type,
    overload,
)

from cloudcoil.pydantic import (
    BaseModel,
    BaseModelBuilder,
    BuilderContextBase,
    GenericListBuilder,
    ListBuilderContext,
    Never,
    Self,
)
from cloudcoil.resources import Resource
from pydantic import Field

from ....k8s.apimachinery.pkg.apis.meta import v1


class Policy(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Policy"]:
            return Policy

        def build(self) -> "Policy":
            return Policy(**self._attrs)

        def resolution(self, value: Optional[Literal["Required", "Optional"]], /) -> Self:
            """
            Resolution specifies whether resolution of this reference is required.
            The default is 'Required', which means the reconcile will fail if the
            reference cannot be resolved. 'Optional' means this reference will be
            a no-op if it cannot be resolved.
            """
            return self._set("resolution", value)

        def resolve(self, value: Optional[Literal["Always", "IfNotPresent"]], /) -> Self:
            """
            Resolve specifies when this reference should be resolved. The default
            is 'IfNotPresent', which will attempt to resolve the reference only when
            the corresponding field is not present. Use 'Always' to resolve the
            reference on every reconcile.
            """
            return self._set("resolve", value)

    class BuilderContext(BuilderContextBase["Policy.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Policy.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Policy."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Policy", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Policy.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    resolution: Optional[Literal["Required", "Optional"]] = "Required"
    """
    Resolution specifies whether resolution of this reference is required.
    The default is 'Required', which means the reconcile will fail if the
    reference cannot be resolved. 'Optional' means this reference will be
    a no-op if it cannot be resolved.
    """
    resolve: Optional[Literal["Always", "IfNotPresent"]] = None
    """
    Resolve specifies when this reference should be resolved. The default
    is 'IfNotPresent', which will attempt to resolve the reference only when
    the corresponding field is not present. Use 'Always' to resolve the
    reference on every reconcile.
    """


class ImageRef(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ImageRef"]:
            return ImageRef

        def build(self) -> "ImageRef":
            return ImageRef(**self._attrs)

        def name(self, value: str, /) -> Self:
            """
            Name of the referenced object.
            """
            return self._set("name", value)

        @overload
        def policy(self, value_or_callback: Optional[Policy], /) -> "ImageRef.Builder": ...

        @overload
        def policy(
            self,
            value_or_callback: Callable[[Policy.Builder], Policy.Builder | Policy],
            /,
        ) -> "ImageRef.Builder": ...

        @overload
        def policy(self, value_or_callback: Never = ...) -> "Policy.BuilderContext": ...

        def policy(self, value_or_callback=None, /):
            """
            Policies for referencing.
            """
            if self._in_context and value_or_callback is None:
                context = Policy.BuilderContext()
                context._parent_builder = self
                context._field_name = "policy"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Policy.builder())
                if isinstance(output, Policy.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("policy", value)

    class BuilderContext(BuilderContextBase["ImageRef.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ImageRef.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ImageRef."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ImageRef", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ImageRef.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    name: str
    """
    Name of the referenced object.
    """
    policy: Optional[Policy] = None
    """
    Policies for referencing.
    """


class ImageSelector(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ImageSelector"]:
            return ImageSelector

        def build(self) -> "ImageSelector":
            return ImageSelector(**self._attrs)

        def match_controller_ref(self, value: Optional[bool], /) -> Self:
            """
            MatchControllerRef ensures an object with the same controller reference
            as the selecting object is selected.
            """
            return self._set("match_controller_ref", value)

        def match_labels(self, value: Optional[Dict[str, str]], /) -> Self:
            """
            MatchLabels ensures an object with matching labels is selected.
            """
            return self._set("match_labels", value)

        @overload
        def policy(self, value_or_callback: Optional[Policy], /) -> "ImageSelector.Builder": ...

        @overload
        def policy(
            self,
            value_or_callback: Callable[[Policy.Builder], Policy.Builder | Policy],
            /,
        ) -> "ImageSelector.Builder": ...

        @overload
        def policy(self, value_or_callback: Never = ...) -> "Policy.BuilderContext": ...

        def policy(self, value_or_callback=None, /):
            """
            Policies for selection.
            """
            if self._in_context and value_or_callback is None:
                context = Policy.BuilderContext()
                context._parent_builder = self
                context._field_name = "policy"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Policy.builder())
                if isinstance(output, Policy.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("policy", value)

    class BuilderContext(BuilderContextBase["ImageSelector.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ImageSelector.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ImageSelector."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ImageSelector", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ImageSelector.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    match_controller_ref: Annotated[Optional[bool], Field(alias="matchControllerRef")] = None
    """
    MatchControllerRef ensures an object with the same controller reference
    as the selecting object is selected.
    """
    match_labels: Annotated[Optional[Dict[str, str]], Field(alias="matchLabels")] = None
    """
    MatchLabels ensures an object with matching labels is selected.
    """
    policy: Optional[Policy] = None
    """
    Policies for selection.
    """


class SshKeysRef(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["SshKeysRef"]:
            return SshKeysRef

        def build(self) -> "SshKeysRef":
            return SshKeysRef(**self._attrs)

        def name(self, value: str, /) -> Self:
            """
            Name of the referenced object.
            """
            return self._set("name", value)

        @overload
        def policy(self, value_or_callback: Optional[Policy], /) -> "SshKeysRef.Builder": ...

        @overload
        def policy(
            self,
            value_or_callback: Callable[[Policy.Builder], Policy.Builder | Policy],
            /,
        ) -> "SshKeysRef.Builder": ...

        @overload
        def policy(self, value_or_callback: Never = ...) -> "Policy.BuilderContext": ...

        def policy(self, value_or_callback=None, /):
            """
            Policies for referencing.
            """
            if self._in_context and value_or_callback is None:
                context = Policy.BuilderContext()
                context._parent_builder = self
                context._field_name = "policy"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Policy.builder())
                if isinstance(output, Policy.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("policy", value)

    class BuilderContext(BuilderContextBase["SshKeysRef.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = SshKeysRef.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for SshKeysRef."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["SshKeysRef", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use SshKeysRef.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    name: str
    """
    Name of the referenced object.
    """
    policy: Optional[Policy] = None
    """
    Policies for referencing.
    """


class SshKeysSelector(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["SshKeysSelector"]:
            return SshKeysSelector

        def build(self) -> "SshKeysSelector":
            return SshKeysSelector(**self._attrs)

        def match_controller_ref(self, value: Optional[bool], /) -> Self:
            """
            MatchControllerRef ensures an object with the same controller reference
            as the selecting object is selected.
            """
            return self._set("match_controller_ref", value)

        def match_labels(self, value: Optional[Dict[str, str]], /) -> Self:
            """
            MatchLabels ensures an object with matching labels is selected.
            """
            return self._set("match_labels", value)

        @overload
        def policy(self, value_or_callback: Optional[Policy], /) -> "SshKeysSelector.Builder": ...

        @overload
        def policy(
            self,
            value_or_callback: Callable[[Policy.Builder], Policy.Builder | Policy],
            /,
        ) -> "SshKeysSelector.Builder": ...

        @overload
        def policy(self, value_or_callback: Never = ...) -> "Policy.BuilderContext": ...

        def policy(self, value_or_callback=None, /):
            """
            Policies for selection.
            """
            if self._in_context and value_or_callback is None:
                context = Policy.BuilderContext()
                context._parent_builder = self
                context._field_name = "policy"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Policy.builder())
                if isinstance(output, Policy.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("policy", value)

    class BuilderContext(BuilderContextBase["SshKeysSelector.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = SshKeysSelector.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for SshKeysSelector."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["SshKeysSelector", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use SshKeysSelector.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    match_controller_ref: Annotated[Optional[bool], Field(alias="matchControllerRef")] = None
    """
    MatchControllerRef ensures an object with the same controller reference
    as the selecting object is selected.
    """
    match_labels: Annotated[Optional[Dict[str, str]], Field(alias="matchLabels")] = None
    """
    MatchLabels ensures an object with matching labels is selected.
    """
    policy: Optional[Policy] = None
    """
    Policies for selection.
    """


class TagsRef(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["TagsRef"]:
            return TagsRef

        def build(self) -> "TagsRef":
            return TagsRef(**self._attrs)

        def name(self, value: str, /) -> Self:
            """
            Name of the referenced object.
            """
            return self._set("name", value)

        @overload
        def policy(self, value_or_callback: Optional[Policy], /) -> "TagsRef.Builder": ...

        @overload
        def policy(
            self,
            value_or_callback: Callable[[Policy.Builder], Policy.Builder | Policy],
            /,
        ) -> "TagsRef.Builder": ...

        @overload
        def policy(self, value_or_callback: Never = ...) -> "Policy.BuilderContext": ...

        def policy(self, value_or_callback=None, /):
            """
            Policies for referencing.
            """
            if self._in_context and value_or_callback is None:
                context = Policy.BuilderContext()
                context._parent_builder = self
                context._field_name = "policy"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Policy.builder())
                if isinstance(output, Policy.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("policy", value)

    class BuilderContext(BuilderContextBase["TagsRef.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = TagsRef.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for TagsRef."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["TagsRef", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use TagsRef.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    name: str
    """
    Name of the referenced object.
    """
    policy: Optional[Policy] = None
    """
    Policies for referencing.
    """


class TagsSelector(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["TagsSelector"]:
            return TagsSelector

        def build(self) -> "TagsSelector":
            return TagsSelector(**self._attrs)

        def match_controller_ref(self, value: Optional[bool], /) -> Self:
            """
            MatchControllerRef ensures an object with the same controller reference
            as the selecting object is selected.
            """
            return self._set("match_controller_ref", value)

        def match_labels(self, value: Optional[Dict[str, str]], /) -> Self:
            """
            MatchLabels ensures an object with matching labels is selected.
            """
            return self._set("match_labels", value)

        @overload
        def policy(self, value_or_callback: Optional[Policy], /) -> "TagsSelector.Builder": ...

        @overload
        def policy(
            self,
            value_or_callback: Callable[[Policy.Builder], Policy.Builder | Policy],
            /,
        ) -> "TagsSelector.Builder": ...

        @overload
        def policy(self, value_or_callback: Never = ...) -> "Policy.BuilderContext": ...

        def policy(self, value_or_callback=None, /):
            """
            Policies for selection.
            """
            if self._in_context and value_or_callback is None:
                context = Policy.BuilderContext()
                context._parent_builder = self
                context._field_name = "policy"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Policy.builder())
                if isinstance(output, Policy.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("policy", value)

    class BuilderContext(BuilderContextBase["TagsSelector.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = TagsSelector.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for TagsSelector."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["TagsSelector", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use TagsSelector.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    match_controller_ref: Annotated[Optional[bool], Field(alias="matchControllerRef")] = None
    """
    MatchControllerRef ensures an object with the same controller reference
    as the selecting object is selected.
    """
    match_labels: Annotated[Optional[Dict[str, str]], Field(alias="matchLabels")] = None
    """
    MatchLabels ensures an object with matching labels is selected.
    """
    policy: Optional[Policy] = None
    """
    Policies for selection.
    """


class VpcUuidRef(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["VpcUuidRef"]:
            return VpcUuidRef

        def build(self) -> "VpcUuidRef":
            return VpcUuidRef(**self._attrs)

        def name(self, value: str, /) -> Self:
            """
            Name of the referenced object.
            """
            return self._set("name", value)

        @overload
        def policy(self, value_or_callback: Optional[Policy], /) -> "VpcUuidRef.Builder": ...

        @overload
        def policy(
            self,
            value_or_callback: Callable[[Policy.Builder], Policy.Builder | Policy],
            /,
        ) -> "VpcUuidRef.Builder": ...

        @overload
        def policy(self, value_or_callback: Never = ...) -> "Policy.BuilderContext": ...

        def policy(self, value_or_callback=None, /):
            """
            Policies for referencing.
            """
            if self._in_context and value_or_callback is None:
                context = Policy.BuilderContext()
                context._parent_builder = self
                context._field_name = "policy"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Policy.builder())
                if isinstance(output, Policy.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("policy", value)

    class BuilderContext(BuilderContextBase["VpcUuidRef.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = VpcUuidRef.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for VpcUuidRef."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["VpcUuidRef", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use VpcUuidRef.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    name: str
    """
    Name of the referenced object.
    """
    policy: Optional[Policy] = None
    """
    Policies for referencing.
    """


class VpcUuidSelector(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["VpcUuidSelector"]:
            return VpcUuidSelector

        def build(self) -> "VpcUuidSelector":
            return VpcUuidSelector(**self._attrs)

        def match_controller_ref(self, value: Optional[bool], /) -> Self:
            """
            MatchControllerRef ensures an object with the same controller reference
            as the selecting object is selected.
            """
            return self._set("match_controller_ref", value)

        def match_labels(self, value: Optional[Dict[str, str]], /) -> Self:
            """
            MatchLabels ensures an object with matching labels is selected.
            """
            return self._set("match_labels", value)

        @overload
        def policy(self, value_or_callback: Optional[Policy], /) -> "VpcUuidSelector.Builder": ...

        @overload
        def policy(
            self,
            value_or_callback: Callable[[Policy.Builder], Policy.Builder | Policy],
            /,
        ) -> "VpcUuidSelector.Builder": ...

        @overload
        def policy(self, value_or_callback: Never = ...) -> "Policy.BuilderContext": ...

        def policy(self, value_or_callback=None, /):
            """
            Policies for selection.
            """
            if self._in_context and value_or_callback is None:
                context = Policy.BuilderContext()
                context._parent_builder = self
                context._field_name = "policy"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Policy.builder())
                if isinstance(output, Policy.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("policy", value)

    class BuilderContext(BuilderContextBase["VpcUuidSelector.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = VpcUuidSelector.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for VpcUuidSelector."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["VpcUuidSelector", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use VpcUuidSelector.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    match_controller_ref: Annotated[Optional[bool], Field(alias="matchControllerRef")] = None
    """
    MatchControllerRef ensures an object with the same controller reference
    as the selecting object is selected.
    """
    match_labels: Annotated[Optional[Dict[str, str]], Field(alias="matchLabels")] = None
    """
    MatchLabels ensures an object with matching labels is selected.
    """
    policy: Optional[Policy] = None
    """
    Policies for selection.
    """


class ForProvider(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ForProvider"]:
            return ForProvider

        def build(self) -> "ForProvider":
            return ForProvider(**self._attrs)

        def backups(self, value: Optional[bool], /) -> Self:
            """
            Boolean controlling if backups are made. Defaults to
            false.
            """
            return self._set("backups", value)

        def droplet_agent(self, value: Optional[bool], /) -> Self:
            """
            A boolean indicating whether to install the
            DigitalOcean agent used for providing access to the Droplet web console in
            the control panel. By default, the agent is installed on new Droplets but
            installation errors (i.e. OS not supported) are ignored. To prevent it from
            being installed, set to false. To make installation errors fatal, explicitly
            set it to true.
            """
            return self._set("droplet_agent", value)

        def graceful_shutdown(self, value: Optional[bool], /) -> Self:
            """
            A boolean indicating whether the droplet
            should be gracefully shut down before it is deleted.
            """
            return self._set("graceful_shutdown", value)

        def image(self, value: Optional[str], /) -> Self:
            """
            The Droplet image ID or slug. This could be either image ID or droplet snapshot ID.
            """
            return self._set("image", value)

        @overload
        def image_ref(self, value_or_callback: Optional[ImageRef], /) -> "ForProvider.Builder": ...

        @overload
        def image_ref(
            self,
            value_or_callback: Callable[[ImageRef.Builder], ImageRef.Builder | ImageRef],
            /,
        ) -> "ForProvider.Builder": ...

        @overload
        def image_ref(self, value_or_callback: Never = ...) -> "ImageRef.BuilderContext": ...

        def image_ref(self, value_or_callback=None, /):
            """
            Reference to a Image in custom to populate image.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRef.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_ref"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRef.builder())
                if isinstance(output, ImageRef.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_ref", value)

        @overload
        def image_selector(
            self, value_or_callback: Optional[ImageSelector], /
        ) -> "ForProvider.Builder": ...

        @overload
        def image_selector(
            self,
            value_or_callback: Callable[
                [ImageSelector.Builder], ImageSelector.Builder | ImageSelector
            ],
            /,
        ) -> "ForProvider.Builder": ...

        @overload
        def image_selector(
            self, value_or_callback: Never = ...
        ) -> "ImageSelector.BuilderContext": ...

        def image_selector(self, value_or_callback=None, /):
            """
            Selector for a Image in custom to populate image.
            """
            if self._in_context and value_or_callback is None:
                context = ImageSelector.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_selector"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageSelector.builder())
                if isinstance(output, ImageSelector.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_selector", value)

        def ipv6(self, value: Optional[bool], /) -> Self:
            """
            Boolean controlling if IPv6 is enabled. Defaults to false.
            Once enabled for a Droplet, IPv6 can not be disabled. When enabling IPv6 on
            an existing Droplet, additional OS-level configuration
            is required.
            """
            return self._set("ipv6", value)

        def ipv6_address(self, value: Optional[str], /) -> Self:
            """
            The IPv6 address
            """
            return self._set("ipv6_address", value)

        def monitoring(self, value: Optional[bool], /) -> Self:
            """
            Boolean controlling whether monitoring agent is installed.
            Defaults to false. If set to true, you can configure monitor alert policies
            monitor alert resource
            """
            return self._set("monitoring", value)

        def name(self, value: Optional[str], /) -> Self:
            """
            The Droplet name.
            """
            return self._set("name", value)

        def private_networking(self, value: Optional[bool], /) -> Self:
            """
            Deprecated Boolean controlling if private networking
            is enabled. This parameter has been deprecated. Use vpc_uuid instead to specify a VPC network for the Droplet. If no vpc_uuid is provided, the Droplet will be placed in your account's default VPC for the region.
            """
            return self._set("private_networking", value)

        def region(self, value: Optional[str], /) -> Self:
            """
            The region where the Droplet will be created.
            """
            return self._set("region", value)

        def resize_disk(self, value: Optional[bool], /) -> Self:
            """
            Boolean controlling whether to increase the disk
            size when resizing a Droplet. It defaults to true. When set to false,
            only the Droplet's RAM and CPU will be resized. Increasing a Droplet's disk
            size is a permanent change. Increasing only RAM and CPU is reversible.
            """
            return self._set("resize_disk", value)

        def size(self, value: Optional[str], /) -> Self:
            """
            The unique slug that identifies the type of Droplet. You can find a list of available slugs on DigitalOcean API documentation.
            """
            return self._set("size", value)

        def ssh_keys(self, value: Optional[List[str]], /) -> Self:
            """
            A list of SSH key IDs or fingerprints to enable in
            the format [12345, 123456]. To retrieve this info, use the
            DigitalOcean API
            or CLI (doctl compute ssh-key list). Once a Droplet is created keys can not
            be added or removed via this provider. Modifying this field will prompt you
            to destroy and recreate the Droplet.
            """
            return self._set("ssh_keys", value)

        @overload
        def ssh_keys_refs(
            self, value_or_callback: List[SshKeysRef], /
        ) -> "ForProvider.Builder": ...

        @overload
        def ssh_keys_refs(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[SshKeysRef, SshKeysRef.Builder]],
                GenericListBuilder[SshKeysRef, SshKeysRef.Builder] | List[SshKeysRef],
            ],
            /,
        ) -> "ForProvider.Builder": ...

        @overload
        def ssh_keys_refs(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[SshKeysRef.Builder]: ...

        def ssh_keys_refs(self, value_or_callback=None, /):
            """
            References to Key in ssh to populate sshKeys.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[SshKeysRef.Builder]()
                context._parent_builder = self
                context._field_name = "ssh_keys_refs"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(SshKeysRef.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("ssh_keys_refs", value)

        @overload
        def ssh_keys_selector(
            self, value_or_callback: Optional[SshKeysSelector], /
        ) -> "ForProvider.Builder": ...

        @overload
        def ssh_keys_selector(
            self,
            value_or_callback: Callable[
                [SshKeysSelector.Builder], SshKeysSelector.Builder | SshKeysSelector
            ],
            /,
        ) -> "ForProvider.Builder": ...

        @overload
        def ssh_keys_selector(
            self, value_or_callback: Never = ...
        ) -> "SshKeysSelector.BuilderContext": ...

        def ssh_keys_selector(self, value_or_callback=None, /):
            """
            Selector for a list of Key in ssh to populate sshKeys.
            """
            if self._in_context and value_or_callback is None:
                context = SshKeysSelector.BuilderContext()
                context._parent_builder = self
                context._field_name = "ssh_keys_selector"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(SshKeysSelector.builder())
                if isinstance(output, SshKeysSelector.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("ssh_keys_selector", value)

        def tags(self, value: Optional[List[str]], /) -> Self:
            """
            A list of the tags to be applied to this Droplet.
            """
            return self._set("tags", value)

        @overload
        def tags_refs(self, value_or_callback: List[TagsRef], /) -> "ForProvider.Builder": ...

        @overload
        def tags_refs(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[TagsRef, TagsRef.Builder]],
                GenericListBuilder[TagsRef, TagsRef.Builder] | List[TagsRef],
            ],
            /,
        ) -> "ForProvider.Builder": ...

        @overload
        def tags_refs(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[TagsRef.Builder]: ...

        def tags_refs(self, value_or_callback=None, /):
            """
            References to Tag in digitalocean to populate tags.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[TagsRef.Builder]()
                context._parent_builder = self
                context._field_name = "tags_refs"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(TagsRef.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("tags_refs", value)

        @overload
        def tags_selector(
            self, value_or_callback: Optional[TagsSelector], /
        ) -> "ForProvider.Builder": ...

        @overload
        def tags_selector(
            self,
            value_or_callback: Callable[
                [TagsSelector.Builder], TagsSelector.Builder | TagsSelector
            ],
            /,
        ) -> "ForProvider.Builder": ...

        @overload
        def tags_selector(
            self, value_or_callback: Never = ...
        ) -> "TagsSelector.BuilderContext": ...

        def tags_selector(self, value_or_callback=None, /):
            """
            Selector for a list of Tag in digitalocean to populate tags.
            """
            if self._in_context and value_or_callback is None:
                context = TagsSelector.BuilderContext()
                context._parent_builder = self
                context._field_name = "tags_selector"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(TagsSelector.builder())
                if isinstance(output, TagsSelector.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("tags_selector", value)

        def user_data(self, value: Optional[str], /) -> Self:
            """
            A string of the desired User Data for the Droplet.
            """
            return self._set("user_data", value)

        def volume_ids(self, value: Optional[List[str]], /) -> Self:
            """
            A list of the IDs of each block storage volume to be attached to the Droplet.
            """
            return self._set("volume_ids", value)

        def vpc_uuid(self, value: Optional[str], /) -> Self:
            """
            The ID of the VPC where the Droplet will be located.
            """
            return self._set("vpc_uuid", value)

        @overload
        def vpc_uuid_ref(
            self, value_or_callback: Optional[VpcUuidRef], /
        ) -> "ForProvider.Builder": ...

        @overload
        def vpc_uuid_ref(
            self,
            value_or_callback: Callable[[VpcUuidRef.Builder], VpcUuidRef.Builder | VpcUuidRef],
            /,
        ) -> "ForProvider.Builder": ...

        @overload
        def vpc_uuid_ref(self, value_or_callback: Never = ...) -> "VpcUuidRef.BuilderContext": ...

        def vpc_uuid_ref(self, value_or_callback=None, /):
            """
            Reference to a VPC in vpc to populate vpcUuid.
            """
            if self._in_context and value_or_callback is None:
                context = VpcUuidRef.BuilderContext()
                context._parent_builder = self
                context._field_name = "vpc_uuid_ref"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VpcUuidRef.builder())
                if isinstance(output, VpcUuidRef.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("vpc_uuid_ref", value)

        @overload
        def vpc_uuid_selector(
            self, value_or_callback: Optional[VpcUuidSelector], /
        ) -> "ForProvider.Builder": ...

        @overload
        def vpc_uuid_selector(
            self,
            value_or_callback: Callable[
                [VpcUuidSelector.Builder], VpcUuidSelector.Builder | VpcUuidSelector
            ],
            /,
        ) -> "ForProvider.Builder": ...

        @overload
        def vpc_uuid_selector(
            self, value_or_callback: Never = ...
        ) -> "VpcUuidSelector.BuilderContext": ...

        def vpc_uuid_selector(self, value_or_callback=None, /):
            """
            Selector for a VPC in vpc to populate vpcUuid.
            """
            if self._in_context and value_or_callback is None:
                context = VpcUuidSelector.BuilderContext()
                context._parent_builder = self
                context._field_name = "vpc_uuid_selector"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VpcUuidSelector.builder())
                if isinstance(output, VpcUuidSelector.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("vpc_uuid_selector", value)

    class BuilderContext(BuilderContextBase["ForProvider.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ForProvider.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ForProvider."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ForProvider", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ForProvider.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    backups: Optional[bool] = None
    """
    Boolean controlling if backups are made. Defaults to
    false.
    """
    droplet_agent: Annotated[Optional[bool], Field(alias="dropletAgent")] = None
    """
    A boolean indicating whether to install the
    DigitalOcean agent used for providing access to the Droplet web console in
    the control panel. By default, the agent is installed on new Droplets but
    installation errors (i.e. OS not supported) are ignored. To prevent it from
    being installed, set to false. To make installation errors fatal, explicitly
    set it to true.
    """
    graceful_shutdown: Annotated[Optional[bool], Field(alias="gracefulShutdown")] = None
    """
    A boolean indicating whether the droplet
    should be gracefully shut down before it is deleted.
    """
    image: Optional[str] = None
    """
    The Droplet image ID or slug. This could be either image ID or droplet snapshot ID.
    """
    image_ref: Annotated[Optional[ImageRef], Field(alias="imageRef")] = None
    """
    Reference to a Image in custom to populate image.
    """
    image_selector: Annotated[Optional[ImageSelector], Field(alias="imageSelector")] = None
    """
    Selector for a Image in custom to populate image.
    """
    ipv6: Optional[bool] = None
    """
    Boolean controlling if IPv6 is enabled. Defaults to false.
    Once enabled for a Droplet, IPv6 can not be disabled. When enabling IPv6 on
    an existing Droplet, additional OS-level configuration
    is required.
    """
    ipv6_address: Annotated[Optional[str], Field(alias="ipv6Address")] = None
    """
    The IPv6 address
    """
    monitoring: Optional[bool] = None
    """
    Boolean controlling whether monitoring agent is installed.
    Defaults to false. If set to true, you can configure monitor alert policies
    monitor alert resource
    """
    name: Optional[str] = None
    """
    The Droplet name.
    """
    private_networking: Annotated[Optional[bool], Field(alias="privateNetworking")] = None
    """
    Deprecated Boolean controlling if private networking
    is enabled. This parameter has been deprecated. Use vpc_uuid instead to specify a VPC network for the Droplet. If no vpc_uuid is provided, the Droplet will be placed in your account's default VPC for the region.
    """
    region: Optional[str] = None
    """
    The region where the Droplet will be created.
    """
    resize_disk: Annotated[Optional[bool], Field(alias="resizeDisk")] = None
    """
    Boolean controlling whether to increase the disk
    size when resizing a Droplet. It defaults to true. When set to false,
    only the Droplet's RAM and CPU will be resized. Increasing a Droplet's disk
    size is a permanent change. Increasing only RAM and CPU is reversible.
    """
    size: Optional[str] = None
    """
    The unique slug that identifies the type of Droplet. You can find a list of available slugs on DigitalOcean API documentation.
    """
    ssh_keys: Annotated[Optional[List[str]], Field(alias="sshKeys")] = None
    """
    A list of SSH key IDs or fingerprints to enable in
    the format [12345, 123456]. To retrieve this info, use the
    DigitalOcean API
    or CLI (doctl compute ssh-key list). Once a Droplet is created keys can not
    be added or removed via this provider. Modifying this field will prompt you
    to destroy and recreate the Droplet.
    """
    ssh_keys_refs: Annotated[Optional[List[SshKeysRef]], Field(alias="sshKeysRefs")] = None
    """
    References to Key in ssh to populate sshKeys.
    """
    ssh_keys_selector: Annotated[Optional[SshKeysSelector], Field(alias="sshKeysSelector")] = None
    """
    Selector for a list of Key in ssh to populate sshKeys.
    """
    tags: Optional[List[str]] = None
    """
    A list of the tags to be applied to this Droplet.
    """
    tags_refs: Annotated[Optional[List[TagsRef]], Field(alias="tagsRefs")] = None
    """
    References to Tag in digitalocean to populate tags.
    """
    tags_selector: Annotated[Optional[TagsSelector], Field(alias="tagsSelector")] = None
    """
    Selector for a list of Tag in digitalocean to populate tags.
    """
    user_data: Annotated[Optional[str], Field(alias="userData")] = None
    """
    A string of the desired User Data for the Droplet.
    """
    volume_ids: Annotated[Optional[List[str]], Field(alias="volumeIds")] = None
    """
    A list of the IDs of each block storage volume to be attached to the Droplet.
    """
    vpc_uuid: Annotated[Optional[str], Field(alias="vpcUuid")] = None
    """
    The ID of the VPC where the Droplet will be located.
    """
    vpc_uuid_ref: Annotated[Optional[VpcUuidRef], Field(alias="vpcUuidRef")] = None
    """
    Reference to a VPC in vpc to populate vpcUuid.
    """
    vpc_uuid_selector: Annotated[Optional[VpcUuidSelector], Field(alias="vpcUuidSelector")] = None
    """
    Selector for a VPC in vpc to populate vpcUuid.
    """


class InitProvider(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["InitProvider"]:
            return InitProvider

        def build(self) -> "InitProvider":
            return InitProvider(**self._attrs)

        def backups(self, value: Optional[bool], /) -> Self:
            """
            Boolean controlling if backups are made. Defaults to
            false.
            """
            return self._set("backups", value)

        def droplet_agent(self, value: Optional[bool], /) -> Self:
            """
            A boolean indicating whether to install the
            DigitalOcean agent used for providing access to the Droplet web console in
            the control panel. By default, the agent is installed on new Droplets but
            installation errors (i.e. OS not supported) are ignored. To prevent it from
            being installed, set to false. To make installation errors fatal, explicitly
            set it to true.
            """
            return self._set("droplet_agent", value)

        def graceful_shutdown(self, value: Optional[bool], /) -> Self:
            """
            A boolean indicating whether the droplet
            should be gracefully shut down before it is deleted.
            """
            return self._set("graceful_shutdown", value)

        def image(self, value: Optional[str], /) -> Self:
            """
            The Droplet image ID or slug. This could be either image ID or droplet snapshot ID.
            """
            return self._set("image", value)

        @overload
        def image_ref(self, value_or_callback: Optional[ImageRef], /) -> "InitProvider.Builder": ...

        @overload
        def image_ref(
            self,
            value_or_callback: Callable[[ImageRef.Builder], ImageRef.Builder | ImageRef],
            /,
        ) -> "InitProvider.Builder": ...

        @overload
        def image_ref(self, value_or_callback: Never = ...) -> "ImageRef.BuilderContext": ...

        def image_ref(self, value_or_callback=None, /):
            """
            Reference to a Image in custom to populate image.
            """
            if self._in_context and value_or_callback is None:
                context = ImageRef.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_ref"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageRef.builder())
                if isinstance(output, ImageRef.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_ref", value)

        @overload
        def image_selector(
            self, value_or_callback: Optional[ImageSelector], /
        ) -> "InitProvider.Builder": ...

        @overload
        def image_selector(
            self,
            value_or_callback: Callable[
                [ImageSelector.Builder], ImageSelector.Builder | ImageSelector
            ],
            /,
        ) -> "InitProvider.Builder": ...

        @overload
        def image_selector(
            self, value_or_callback: Never = ...
        ) -> "ImageSelector.BuilderContext": ...

        def image_selector(self, value_or_callback=None, /):
            """
            Selector for a Image in custom to populate image.
            """
            if self._in_context and value_or_callback is None:
                context = ImageSelector.BuilderContext()
                context._parent_builder = self
                context._field_name = "image_selector"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ImageSelector.builder())
                if isinstance(output, ImageSelector.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("image_selector", value)

        def ipv6(self, value: Optional[bool], /) -> Self:
            """
            Boolean controlling if IPv6 is enabled. Defaults to false.
            Once enabled for a Droplet, IPv6 can not be disabled. When enabling IPv6 on
            an existing Droplet, additional OS-level configuration
            is required.
            """
            return self._set("ipv6", value)

        def ipv6_address(self, value: Optional[str], /) -> Self:
            """
            The IPv6 address
            """
            return self._set("ipv6_address", value)

        def monitoring(self, value: Optional[bool], /) -> Self:
            """
            Boolean controlling whether monitoring agent is installed.
            Defaults to false. If set to true, you can configure monitor alert policies
            monitor alert resource
            """
            return self._set("monitoring", value)

        def name(self, value: Optional[str], /) -> Self:
            """
            The Droplet name.
            """
            return self._set("name", value)

        def private_networking(self, value: Optional[bool], /) -> Self:
            """
            Deprecated Boolean controlling if private networking
            is enabled. This parameter has been deprecated. Use vpc_uuid instead to specify a VPC network for the Droplet. If no vpc_uuid is provided, the Droplet will be placed in your account's default VPC for the region.
            """
            return self._set("private_networking", value)

        def region(self, value: Optional[str], /) -> Self:
            """
            The region where the Droplet will be created.
            """
            return self._set("region", value)

        def resize_disk(self, value: Optional[bool], /) -> Self:
            """
            Boolean controlling whether to increase the disk
            size when resizing a Droplet. It defaults to true. When set to false,
            only the Droplet's RAM and CPU will be resized. Increasing a Droplet's disk
            size is a permanent change. Increasing only RAM and CPU is reversible.
            """
            return self._set("resize_disk", value)

        def size(self, value: Optional[str], /) -> Self:
            """
            The unique slug that identifies the type of Droplet. You can find a list of available slugs on DigitalOcean API documentation.
            """
            return self._set("size", value)

        def ssh_keys(self, value: Optional[List[str]], /) -> Self:
            """
            A list of SSH key IDs or fingerprints to enable in
            the format [12345, 123456]. To retrieve this info, use the
            DigitalOcean API
            or CLI (doctl compute ssh-key list). Once a Droplet is created keys can not
            be added or removed via this provider. Modifying this field will prompt you
            to destroy and recreate the Droplet.
            """
            return self._set("ssh_keys", value)

        @overload
        def ssh_keys_refs(
            self, value_or_callback: List[SshKeysRef], /
        ) -> "InitProvider.Builder": ...

        @overload
        def ssh_keys_refs(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[SshKeysRef, SshKeysRef.Builder]],
                GenericListBuilder[SshKeysRef, SshKeysRef.Builder] | List[SshKeysRef],
            ],
            /,
        ) -> "InitProvider.Builder": ...

        @overload
        def ssh_keys_refs(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[SshKeysRef.Builder]: ...

        def ssh_keys_refs(self, value_or_callback=None, /):
            """
            References to Key in ssh to populate sshKeys.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[SshKeysRef.Builder]()
                context._parent_builder = self
                context._field_name = "ssh_keys_refs"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(SshKeysRef.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("ssh_keys_refs", value)

        @overload
        def ssh_keys_selector(
            self, value_or_callback: Optional[SshKeysSelector], /
        ) -> "InitProvider.Builder": ...

        @overload
        def ssh_keys_selector(
            self,
            value_or_callback: Callable[
                [SshKeysSelector.Builder], SshKeysSelector.Builder | SshKeysSelector
            ],
            /,
        ) -> "InitProvider.Builder": ...

        @overload
        def ssh_keys_selector(
            self, value_or_callback: Never = ...
        ) -> "SshKeysSelector.BuilderContext": ...

        def ssh_keys_selector(self, value_or_callback=None, /):
            """
            Selector for a list of Key in ssh to populate sshKeys.
            """
            if self._in_context and value_or_callback is None:
                context = SshKeysSelector.BuilderContext()
                context._parent_builder = self
                context._field_name = "ssh_keys_selector"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(SshKeysSelector.builder())
                if isinstance(output, SshKeysSelector.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("ssh_keys_selector", value)

        def tags(self, value: Optional[List[str]], /) -> Self:
            """
            A list of the tags to be applied to this Droplet.
            """
            return self._set("tags", value)

        @overload
        def tags_refs(self, value_or_callback: List[TagsRef], /) -> "InitProvider.Builder": ...

        @overload
        def tags_refs(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[TagsRef, TagsRef.Builder]],
                GenericListBuilder[TagsRef, TagsRef.Builder] | List[TagsRef],
            ],
            /,
        ) -> "InitProvider.Builder": ...

        @overload
        def tags_refs(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[TagsRef.Builder]: ...

        def tags_refs(self, value_or_callback=None, /):
            """
            References to Tag in digitalocean to populate tags.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[TagsRef.Builder]()
                context._parent_builder = self
                context._field_name = "tags_refs"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(TagsRef.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("tags_refs", value)

        @overload
        def tags_selector(
            self, value_or_callback: Optional[TagsSelector], /
        ) -> "InitProvider.Builder": ...

        @overload
        def tags_selector(
            self,
            value_or_callback: Callable[
                [TagsSelector.Builder], TagsSelector.Builder | TagsSelector
            ],
            /,
        ) -> "InitProvider.Builder": ...

        @overload
        def tags_selector(
            self, value_or_callback: Never = ...
        ) -> "TagsSelector.BuilderContext": ...

        def tags_selector(self, value_or_callback=None, /):
            """
            Selector for a list of Tag in digitalocean to populate tags.
            """
            if self._in_context and value_or_callback is None:
                context = TagsSelector.BuilderContext()
                context._parent_builder = self
                context._field_name = "tags_selector"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(TagsSelector.builder())
                if isinstance(output, TagsSelector.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("tags_selector", value)

        def user_data(self, value: Optional[str], /) -> Self:
            """
            A string of the desired User Data for the Droplet.
            """
            return self._set("user_data", value)

        def volume_ids(self, value: Optional[List[str]], /) -> Self:
            """
            A list of the IDs of each block storage volume to be attached to the Droplet.
            """
            return self._set("volume_ids", value)

        def vpc_uuid(self, value: Optional[str], /) -> Self:
            """
            The ID of the VPC where the Droplet will be located.
            """
            return self._set("vpc_uuid", value)

        @overload
        def vpc_uuid_ref(
            self, value_or_callback: Optional[VpcUuidRef], /
        ) -> "InitProvider.Builder": ...

        @overload
        def vpc_uuid_ref(
            self,
            value_or_callback: Callable[[VpcUuidRef.Builder], VpcUuidRef.Builder | VpcUuidRef],
            /,
        ) -> "InitProvider.Builder": ...

        @overload
        def vpc_uuid_ref(self, value_or_callback: Never = ...) -> "VpcUuidRef.BuilderContext": ...

        def vpc_uuid_ref(self, value_or_callback=None, /):
            """
            Reference to a VPC in vpc to populate vpcUuid.
            """
            if self._in_context and value_or_callback is None:
                context = VpcUuidRef.BuilderContext()
                context._parent_builder = self
                context._field_name = "vpc_uuid_ref"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VpcUuidRef.builder())
                if isinstance(output, VpcUuidRef.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("vpc_uuid_ref", value)

        @overload
        def vpc_uuid_selector(
            self, value_or_callback: Optional[VpcUuidSelector], /
        ) -> "InitProvider.Builder": ...

        @overload
        def vpc_uuid_selector(
            self,
            value_or_callback: Callable[
                [VpcUuidSelector.Builder], VpcUuidSelector.Builder | VpcUuidSelector
            ],
            /,
        ) -> "InitProvider.Builder": ...

        @overload
        def vpc_uuid_selector(
            self, value_or_callback: Never = ...
        ) -> "VpcUuidSelector.BuilderContext": ...

        def vpc_uuid_selector(self, value_or_callback=None, /):
            """
            Selector for a VPC in vpc to populate vpcUuid.
            """
            if self._in_context and value_or_callback is None:
                context = VpcUuidSelector.BuilderContext()
                context._parent_builder = self
                context._field_name = "vpc_uuid_selector"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(VpcUuidSelector.builder())
                if isinstance(output, VpcUuidSelector.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("vpc_uuid_selector", value)

    class BuilderContext(BuilderContextBase["InitProvider.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = InitProvider.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for InitProvider."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["InitProvider", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use InitProvider.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    backups: Optional[bool] = None
    """
    Boolean controlling if backups are made. Defaults to
    false.
    """
    droplet_agent: Annotated[Optional[bool], Field(alias="dropletAgent")] = None
    """
    A boolean indicating whether to install the
    DigitalOcean agent used for providing access to the Droplet web console in
    the control panel. By default, the agent is installed on new Droplets but
    installation errors (i.e. OS not supported) are ignored. To prevent it from
    being installed, set to false. To make installation errors fatal, explicitly
    set it to true.
    """
    graceful_shutdown: Annotated[Optional[bool], Field(alias="gracefulShutdown")] = None
    """
    A boolean indicating whether the droplet
    should be gracefully shut down before it is deleted.
    """
    image: Optional[str] = None
    """
    The Droplet image ID or slug. This could be either image ID or droplet snapshot ID.
    """
    image_ref: Annotated[Optional[ImageRef], Field(alias="imageRef")] = None
    """
    Reference to a Image in custom to populate image.
    """
    image_selector: Annotated[Optional[ImageSelector], Field(alias="imageSelector")] = None
    """
    Selector for a Image in custom to populate image.
    """
    ipv6: Optional[bool] = None
    """
    Boolean controlling if IPv6 is enabled. Defaults to false.
    Once enabled for a Droplet, IPv6 can not be disabled. When enabling IPv6 on
    an existing Droplet, additional OS-level configuration
    is required.
    """
    ipv6_address: Annotated[Optional[str], Field(alias="ipv6Address")] = None
    """
    The IPv6 address
    """
    monitoring: Optional[bool] = None
    """
    Boolean controlling whether monitoring agent is installed.
    Defaults to false. If set to true, you can configure monitor alert policies
    monitor alert resource
    """
    name: Optional[str] = None
    """
    The Droplet name.
    """
    private_networking: Annotated[Optional[bool], Field(alias="privateNetworking")] = None
    """
    Deprecated Boolean controlling if private networking
    is enabled. This parameter has been deprecated. Use vpc_uuid instead to specify a VPC network for the Droplet. If no vpc_uuid is provided, the Droplet will be placed in your account's default VPC for the region.
    """
    region: Optional[str] = None
    """
    The region where the Droplet will be created.
    """
    resize_disk: Annotated[Optional[bool], Field(alias="resizeDisk")] = None
    """
    Boolean controlling whether to increase the disk
    size when resizing a Droplet. It defaults to true. When set to false,
    only the Droplet's RAM and CPU will be resized. Increasing a Droplet's disk
    size is a permanent change. Increasing only RAM and CPU is reversible.
    """
    size: Optional[str] = None
    """
    The unique slug that identifies the type of Droplet. You can find a list of available slugs on DigitalOcean API documentation.
    """
    ssh_keys: Annotated[Optional[List[str]], Field(alias="sshKeys")] = None
    """
    A list of SSH key IDs or fingerprints to enable in
    the format [12345, 123456]. To retrieve this info, use the
    DigitalOcean API
    or CLI (doctl compute ssh-key list). Once a Droplet is created keys can not
    be added or removed via this provider. Modifying this field will prompt you
    to destroy and recreate the Droplet.
    """
    ssh_keys_refs: Annotated[Optional[List[SshKeysRef]], Field(alias="sshKeysRefs")] = None
    """
    References to Key in ssh to populate sshKeys.
    """
    ssh_keys_selector: Annotated[Optional[SshKeysSelector], Field(alias="sshKeysSelector")] = None
    """
    Selector for a list of Key in ssh to populate sshKeys.
    """
    tags: Optional[List[str]] = None
    """
    A list of the tags to be applied to this Droplet.
    """
    tags_refs: Annotated[Optional[List[TagsRef]], Field(alias="tagsRefs")] = None
    """
    References to Tag in digitalocean to populate tags.
    """
    tags_selector: Annotated[Optional[TagsSelector], Field(alias="tagsSelector")] = None
    """
    Selector for a list of Tag in digitalocean to populate tags.
    """
    user_data: Annotated[Optional[str], Field(alias="userData")] = None
    """
    A string of the desired User Data for the Droplet.
    """
    volume_ids: Annotated[Optional[List[str]], Field(alias="volumeIds")] = None
    """
    A list of the IDs of each block storage volume to be attached to the Droplet.
    """
    vpc_uuid: Annotated[Optional[str], Field(alias="vpcUuid")] = None
    """
    The ID of the VPC where the Droplet will be located.
    """
    vpc_uuid_ref: Annotated[Optional[VpcUuidRef], Field(alias="vpcUuidRef")] = None
    """
    Reference to a VPC in vpc to populate vpcUuid.
    """
    vpc_uuid_selector: Annotated[Optional[VpcUuidSelector], Field(alias="vpcUuidSelector")] = None
    """
    Selector for a VPC in vpc to populate vpcUuid.
    """


class ProviderConfigRef(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ProviderConfigRef"]:
            return ProviderConfigRef

        def build(self) -> "ProviderConfigRef":
            return ProviderConfigRef(**self._attrs)

        def name(self, value: str, /) -> Self:
            """
            Name of the referenced object.
            """
            return self._set("name", value)

        @overload
        def policy(self, value_or_callback: Optional[Policy], /) -> "ProviderConfigRef.Builder": ...

        @overload
        def policy(
            self,
            value_or_callback: Callable[[Policy.Builder], Policy.Builder | Policy],
            /,
        ) -> "ProviderConfigRef.Builder": ...

        @overload
        def policy(self, value_or_callback: Never = ...) -> "Policy.BuilderContext": ...

        def policy(self, value_or_callback=None, /):
            """
            Policies for referencing.
            """
            if self._in_context and value_or_callback is None:
                context = Policy.BuilderContext()
                context._parent_builder = self
                context._field_name = "policy"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Policy.builder())
                if isinstance(output, Policy.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("policy", value)

    class BuilderContext(BuilderContextBase["ProviderConfigRef.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ProviderConfigRef.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ProviderConfigRef."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ProviderConfigRef", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ProviderConfigRef.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    name: str
    """
    Name of the referenced object.
    """
    policy: Optional[Policy] = None
    """
    Policies for referencing.
    """


class ConfigRef(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ConfigRef"]:
            return ConfigRef

        def build(self) -> "ConfigRef":
            return ConfigRef(**self._attrs)

        def name(self, value: str, /) -> Self:
            """
            Name of the referenced object.
            """
            return self._set("name", value)

        @overload
        def policy(self, value_or_callback: Optional[Policy], /) -> "ConfigRef.Builder": ...

        @overload
        def policy(
            self,
            value_or_callback: Callable[[Policy.Builder], Policy.Builder | Policy],
            /,
        ) -> "ConfigRef.Builder": ...

        @overload
        def policy(self, value_or_callback: Never = ...) -> "Policy.BuilderContext": ...

        def policy(self, value_or_callback=None, /):
            """
            Policies for referencing.
            """
            if self._in_context and value_or_callback is None:
                context = Policy.BuilderContext()
                context._parent_builder = self
                context._field_name = "policy"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Policy.builder())
                if isinstance(output, Policy.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("policy", value)

    class BuilderContext(BuilderContextBase["ConfigRef.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ConfigRef.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ConfigRef."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ConfigRef", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ConfigRef.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    name: str
    """
    Name of the referenced object.
    """
    policy: Optional[Policy] = None
    """
    Policies for referencing.
    """


class Metadata(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Metadata"]:
            return Metadata

        def build(self) -> "Metadata":
            return Metadata(**self._attrs)

        def annotations(self, value: Optional[Dict[str, str]], /) -> Self:
            """
            Annotations are the annotations to be added to connection secret.
            - For Kubernetes secrets, this will be used as "metadata.annotations".
            - It is up to Secret Store implementation for others store types.
            """
            return self._set("annotations", value)

        def labels(self, value: Optional[Dict[str, str]], /) -> Self:
            """
            Labels are the labels/tags to be added to connection secret.
            - For Kubernetes secrets, this will be used as "metadata.labels".
            - It is up to Secret Store implementation for others store types.
            """
            return self._set("labels", value)

        def type(self, value: Optional[str], /) -> Self:
            """
            Type is the SecretType for the connection secret.
            - Only valid for Kubernetes Secret Stores.
            """
            return self._set("type", value)

    class BuilderContext(BuilderContextBase["Metadata.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Metadata.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Metadata."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Metadata", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Metadata.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    annotations: Optional[Dict[str, str]] = None
    """
    Annotations are the annotations to be added to connection secret.
    - For Kubernetes secrets, this will be used as "metadata.annotations".
    - It is up to Secret Store implementation for others store types.
    """
    labels: Optional[Dict[str, str]] = None
    """
    Labels are the labels/tags to be added to connection secret.
    - For Kubernetes secrets, this will be used as "metadata.labels".
    - It is up to Secret Store implementation for others store types.
    """
    type: Optional[str] = None
    """
    Type is the SecretType for the connection secret.
    - Only valid for Kubernetes Secret Stores.
    """


class PublishConnectionDetailsTo(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["PublishConnectionDetailsTo"]:
            return PublishConnectionDetailsTo

        def build(self) -> "PublishConnectionDetailsTo":
            return PublishConnectionDetailsTo(**self._attrs)

        @overload
        def config_ref(
            self, value_or_callback: Optional[ConfigRef], /
        ) -> "PublishConnectionDetailsTo.Builder": ...

        @overload
        def config_ref(
            self,
            value_or_callback: Callable[[ConfigRef.Builder], ConfigRef.Builder | ConfigRef],
            /,
        ) -> "PublishConnectionDetailsTo.Builder": ...

        @overload
        def config_ref(self, value_or_callback: Never = ...) -> "ConfigRef.BuilderContext": ...

        def config_ref(self, value_or_callback=None, /):
            """
            SecretStoreConfigRef specifies which secret store config should be used
            for this ConnectionSecret.
            """
            if self._in_context and value_or_callback is None:
                context = ConfigRef.BuilderContext()
                context._parent_builder = self
                context._field_name = "config_ref"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ConfigRef.builder())
                if isinstance(output, ConfigRef.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("config_ref", value)

        @overload
        def metadata(
            self, value_or_callback: Optional[Metadata], /
        ) -> "PublishConnectionDetailsTo.Builder": ...

        @overload
        def metadata(
            self,
            value_or_callback: Callable[[Metadata.Builder], Metadata.Builder | Metadata],
            /,
        ) -> "PublishConnectionDetailsTo.Builder": ...

        @overload
        def metadata(self, value_or_callback: Never = ...) -> "Metadata.BuilderContext": ...

        def metadata(self, value_or_callback=None, /):
            """
            Metadata is the metadata for connection secret.
            """
            if self._in_context and value_or_callback is None:
                context = Metadata.BuilderContext()
                context._parent_builder = self
                context._field_name = "metadata"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Metadata.builder())
                if isinstance(output, Metadata.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("metadata", value)

        def name(self, value: str, /) -> Self:
            """
            Name is the name of the connection secret.
            """
            return self._set("name", value)

    class BuilderContext(BuilderContextBase["PublishConnectionDetailsTo.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = PublishConnectionDetailsTo.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for PublishConnectionDetailsTo."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["PublishConnectionDetailsTo", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use PublishConnectionDetailsTo.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    config_ref: Annotated[Optional[ConfigRef], Field(alias="configRef")] = {"name": "default"}
    """
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.
    """
    metadata: Optional[Metadata] = None
    """
    Metadata is the metadata for connection secret.
    """
    name: str
    """
    Name is the name of the connection secret.
    """


class WriteConnectionSecretToRef(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["WriteConnectionSecretToRef"]:
            return WriteConnectionSecretToRef

        def build(self) -> "WriteConnectionSecretToRef":
            return WriteConnectionSecretToRef(**self._attrs)

        def name(self, value: str, /) -> Self:
            """
            Name of the secret.
            """
            return self._set("name", value)

        def namespace(self, value: str, /) -> Self:
            """
            Namespace of the secret.
            """
            return self._set("namespace", value)

    class BuilderContext(BuilderContextBase["WriteConnectionSecretToRef.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = WriteConnectionSecretToRef.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for WriteConnectionSecretToRef."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["WriteConnectionSecretToRef", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use WriteConnectionSecretToRef.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    name: str
    """
    Name of the secret.
    """
    namespace: str
    """
    Namespace of the secret.
    """


class DropletSpec(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["DropletSpec"]:
            return DropletSpec

        def build(self) -> "DropletSpec":
            return DropletSpec(**self._attrs)

        def deletion_policy(self, value: Optional[Literal["Orphan", "Delete"]], /) -> Self:
            """
            DeletionPolicy specifies what will happen to the underlying external
            when this managed resource is deleted - either "Delete" or "Orphan" the
            external resource.
            This field is planned to be deprecated in favor of the ManagementPolicies
            field in a future release. Currently, both could be set independently and
            non-default values would be honored if the feature flag is enabled.
            See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
            """
            return self._set("deletion_policy", value)

        @overload
        def for_provider(self, value_or_callback: ForProvider, /) -> "DropletSpec.Builder": ...

        @overload
        def for_provider(
            self,
            value_or_callback: Callable[[ForProvider.Builder], ForProvider.Builder | ForProvider],
            /,
        ) -> "DropletSpec.Builder": ...

        @overload
        def for_provider(self, value_or_callback: Never = ...) -> "ForProvider.BuilderContext": ...

        def for_provider(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = ForProvider.BuilderContext()
                context._parent_builder = self
                context._field_name = "for_provider"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ForProvider.builder())
                if isinstance(output, ForProvider.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("for_provider", value)

        @overload
        def init_provider(
            self, value_or_callback: Optional[InitProvider], /
        ) -> "DropletSpec.Builder": ...

        @overload
        def init_provider(
            self,
            value_or_callback: Callable[
                [InitProvider.Builder], InitProvider.Builder | InitProvider
            ],
            /,
        ) -> "DropletSpec.Builder": ...

        @overload
        def init_provider(
            self, value_or_callback: Never = ...
        ) -> "InitProvider.BuilderContext": ...

        def init_provider(self, value_or_callback=None, /):
            """
            THIS IS A BETA FIELD. It will be honored
            unless the Management Policies feature flag is disabled.
            InitProvider holds the same fields as ForProvider, with the exception
            of Identifier and other resource reference fields. The fields that are
            in InitProvider are merged into ForProvider when the resource is created.
            The same fields are also added to the terraform ignore_changes hook, to
            avoid updating them after creation. This is useful for fields that are
            required on creation, but we do not desire to update them after creation,
            for example because of an external controller is managing them, like an
            autoscaler.
            """
            if self._in_context and value_or_callback is None:
                context = InitProvider.BuilderContext()
                context._parent_builder = self
                context._field_name = "init_provider"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(InitProvider.builder())
                if isinstance(output, InitProvider.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("init_provider", value)

        def management_policies(
            self,
            value: Optional[
                List[Literal["Observe", "Create", "Update", "Delete", "LateInitialize", "*"]]
            ],
            /,
        ) -> Self:
            """
            THIS IS A BETA FIELD. It is on by default but can be opted out
            through a Crossplane feature flag.
            ManagementPolicies specify the array of actions Crossplane is allowed to
            take on the managed and external resources.
            This field is planned to replace the DeletionPolicy field in a future
            release. Currently, both could be set independently and non-default
            values would be honored if the feature flag is enabled. If both are
            custom, the DeletionPolicy field will be ignored.
            See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
            and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
            """
            return self._set("management_policies", value)

        @overload
        def provider_config_ref(
            self, value_or_callback: Optional[ProviderConfigRef], /
        ) -> "DropletSpec.Builder": ...

        @overload
        def provider_config_ref(
            self,
            value_or_callback: Callable[
                [ProviderConfigRef.Builder],
                ProviderConfigRef.Builder | ProviderConfigRef,
            ],
            /,
        ) -> "DropletSpec.Builder": ...

        @overload
        def provider_config_ref(
            self, value_or_callback: Never = ...
        ) -> "ProviderConfigRef.BuilderContext": ...

        def provider_config_ref(self, value_or_callback=None, /):
            """
            ProviderConfigReference specifies how the provider that will be used to
            create, observe, update, and delete this managed resource should be
            configured.
            """
            if self._in_context and value_or_callback is None:
                context = ProviderConfigRef.BuilderContext()
                context._parent_builder = self
                context._field_name = "provider_config_ref"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ProviderConfigRef.builder())
                if isinstance(output, ProviderConfigRef.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("provider_config_ref", value)

        @overload
        def publish_connection_details_to(
            self, value_or_callback: Optional[PublishConnectionDetailsTo], /
        ) -> "DropletSpec.Builder": ...

        @overload
        def publish_connection_details_to(
            self,
            value_or_callback: Callable[
                [PublishConnectionDetailsTo.Builder],
                PublishConnectionDetailsTo.Builder | PublishConnectionDetailsTo,
            ],
            /,
        ) -> "DropletSpec.Builder": ...

        @overload
        def publish_connection_details_to(
            self, value_or_callback: Never = ...
        ) -> "PublishConnectionDetailsTo.BuilderContext": ...

        def publish_connection_details_to(self, value_or_callback=None, /):
            """
            PublishConnectionDetailsTo specifies the connection secret config which
            contains a name, metadata and a reference to secret store config to
            which any connection details for this managed resource should be written.
            Connection details frequently include the endpoint, username,
            and password required to connect to the managed resource.
            """
            if self._in_context and value_or_callback is None:
                context = PublishConnectionDetailsTo.BuilderContext()
                context._parent_builder = self
                context._field_name = "publish_connection_details_to"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(PublishConnectionDetailsTo.builder())
                if isinstance(output, PublishConnectionDetailsTo.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("publish_connection_details_to", value)

        @overload
        def write_connection_secret_to_ref(
            self, value_or_callback: Optional[WriteConnectionSecretToRef], /
        ) -> "DropletSpec.Builder": ...

        @overload
        def write_connection_secret_to_ref(
            self,
            value_or_callback: Callable[
                [WriteConnectionSecretToRef.Builder],
                WriteConnectionSecretToRef.Builder | WriteConnectionSecretToRef,
            ],
            /,
        ) -> "DropletSpec.Builder": ...

        @overload
        def write_connection_secret_to_ref(
            self, value_or_callback: Never = ...
        ) -> "WriteConnectionSecretToRef.BuilderContext": ...

        def write_connection_secret_to_ref(self, value_or_callback=None, /):
            """
            WriteConnectionSecretToReference specifies the namespace and name of a
            Secret to which any connection details for this managed resource should
            be written. Connection details frequently include the endpoint, username,
            and password required to connect to the managed resource.
            This field is planned to be replaced in a future release in favor of
            PublishConnectionDetailsTo. Currently, both could be set independently
            and connection details would be published to both without affecting
            each other.
            """
            if self._in_context and value_or_callback is None:
                context = WriteConnectionSecretToRef.BuilderContext()
                context._parent_builder = self
                context._field_name = "write_connection_secret_to_ref"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(WriteConnectionSecretToRef.builder())
                if isinstance(output, WriteConnectionSecretToRef.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("write_connection_secret_to_ref", value)

    class BuilderContext(BuilderContextBase["DropletSpec.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = DropletSpec.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for DropletSpec."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["DropletSpec", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use DropletSpec.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    deletion_policy: Annotated[
        Optional[Literal["Orphan", "Delete"]], Field(alias="deletionPolicy")
    ] = "Delete"
    """
    DeletionPolicy specifies what will happen to the underlying external
    when this managed resource is deleted - either "Delete" or "Orphan" the
    external resource.
    This field is planned to be deprecated in favor of the ManagementPolicies
    field in a future release. Currently, both could be set independently and
    non-default values would be honored if the feature flag is enabled.
    See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    """
    for_provider: Annotated[ForProvider, Field(alias="forProvider")]
    init_provider: Annotated[Optional[InitProvider], Field(alias="initProvider")] = None
    """
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.
    """
    management_policies: Annotated[
        Optional[List[Literal["Observe", "Create", "Update", "Delete", "LateInitialize", "*"]]],
        Field(alias="managementPolicies"),
    ] = ["*"]
    """
    THIS IS A BETA FIELD. It is on by default but can be opted out
    through a Crossplane feature flag.
    ManagementPolicies specify the array of actions Crossplane is allowed to
    take on the managed and external resources.
    This field is planned to replace the DeletionPolicy field in a future
    release. Currently, both could be set independently and non-default
    values would be honored if the feature flag is enabled. If both are
    custom, the DeletionPolicy field will be ignored.
    See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    """
    provider_config_ref: Annotated[
        Optional[ProviderConfigRef], Field(alias="providerConfigRef")
    ] = {"name": "default"}
    """
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.
    """
    publish_connection_details_to: Annotated[
        Optional[PublishConnectionDetailsTo], Field(alias="publishConnectionDetailsTo")
    ] = None
    """
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    """
    write_connection_secret_to_ref: Annotated[
        Optional[WriteConnectionSecretToRef], Field(alias="writeConnectionSecretToRef")
    ] = None
    """
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.
    """


class AtProvider(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["AtProvider"]:
            return AtProvider

        def build(self) -> "AtProvider":
            return AtProvider(**self._attrs)

        def backups(self, value: Optional[bool], /) -> Self:
            """
            Boolean controlling if backups are made. Defaults to
            false.
            """
            return self._set("backups", value)

        def created_at(self, value: Optional[str], /) -> Self:
            return self._set("created_at", value)

        def disk(self, value: Optional[float], /) -> Self:
            """
            The size of the instance's disk in GB
            """
            return self._set("disk", value)

        def droplet_agent(self, value: Optional[bool], /) -> Self:
            """
            A boolean indicating whether to install the
            DigitalOcean agent used for providing access to the Droplet web console in
            the control panel. By default, the agent is installed on new Droplets but
            installation errors (i.e. OS not supported) are ignored. To prevent it from
            being installed, set to false. To make installation errors fatal, explicitly
            set it to true.
            """
            return self._set("droplet_agent", value)

        def graceful_shutdown(self, value: Optional[bool], /) -> Self:
            """
            A boolean indicating whether the droplet
            should be gracefully shut down before it is deleted.
            """
            return self._set("graceful_shutdown", value)

        def id(self, value: Optional[str], /) -> Self:
            """
            The ID of the Droplet
            """
            return self._set("id", value)

        def image(self, value: Optional[str], /) -> Self:
            """
            The Droplet image ID or slug. This could be either image ID or droplet snapshot ID.
            """
            return self._set("image", value)

        def ipv4_address(self, value: Optional[str], /) -> Self:
            """
            The IPv4 address
            """
            return self._set("ipv4_address", value)

        def ipv4_address_private(self, value: Optional[str], /) -> Self:
            """
            The private networking IPv4 address
            """
            return self._set("ipv4_address_private", value)

        def ipv6(self, value: Optional[bool], /) -> Self:
            """
            Boolean controlling if IPv6 is enabled. Defaults to false.
            Once enabled for a Droplet, IPv6 can not be disabled. When enabling IPv6 on
            an existing Droplet, additional OS-level configuration
            is required.
            """
            return self._set("ipv6", value)

        def ipv6_address(self, value: Optional[str], /) -> Self:
            """
            The IPv6 address
            """
            return self._set("ipv6_address", value)

        def locked(self, value: Optional[bool], /) -> Self:
            """
            Is the Droplet locked
            """
            return self._set("locked", value)

        def memory(self, value: Optional[float], /) -> Self:
            return self._set("memory", value)

        def monitoring(self, value: Optional[bool], /) -> Self:
            """
            Boolean controlling whether monitoring agent is installed.
            Defaults to false. If set to true, you can configure monitor alert policies
            monitor alert resource
            """
            return self._set("monitoring", value)

        def name(self, value: Optional[str], /) -> Self:
            """
            The Droplet name.
            """
            return self._set("name", value)

        def price_hourly(self, value: Optional[float], /) -> Self:
            """
            Droplet hourly price
            """
            return self._set("price_hourly", value)

        def price_monthly(self, value: Optional[float], /) -> Self:
            """
            Droplet monthly price
            """
            return self._set("price_monthly", value)

        def private_networking(self, value: Optional[bool], /) -> Self:
            """
            Deprecated Boolean controlling if private networking
            is enabled. This parameter has been deprecated. Use vpc_uuid instead to specify a VPC network for the Droplet. If no vpc_uuid is provided, the Droplet will be placed in your account's default VPC for the region.
            """
            return self._set("private_networking", value)

        def region(self, value: Optional[str], /) -> Self:
            """
            The region where the Droplet will be created.
            """
            return self._set("region", value)

        def resize_disk(self, value: Optional[bool], /) -> Self:
            """
            Boolean controlling whether to increase the disk
            size when resizing a Droplet. It defaults to true. When set to false,
            only the Droplet's RAM and CPU will be resized. Increasing a Droplet's disk
            size is a permanent change. Increasing only RAM and CPU is reversible.
            """
            return self._set("resize_disk", value)

        def size(self, value: Optional[str], /) -> Self:
            """
            The unique slug that identifies the type of Droplet. You can find a list of available slugs on DigitalOcean API documentation.
            """
            return self._set("size", value)

        def ssh_keys(self, value: Optional[List[str]], /) -> Self:
            """
            A list of SSH key IDs or fingerprints to enable in
            the format [12345, 123456]. To retrieve this info, use the
            DigitalOcean API
            or CLI (doctl compute ssh-key list). Once a Droplet is created keys can not
            be added or removed via this provider. Modifying this field will prompt you
            to destroy and recreate the Droplet.
            """
            return self._set("ssh_keys", value)

        def status(self, value: Optional[str], /) -> Self:
            """
            The status of the Droplet
            """
            return self._set("status", value)

        def tags(self, value: Optional[List[str]], /) -> Self:
            """
            A list of the tags to be applied to this Droplet.
            """
            return self._set("tags", value)

        def urn(self, value: Optional[str], /) -> Self:
            """
            The uniform resource name of the Droplet
            """
            return self._set("urn", value)

        def user_data(self, value: Optional[str], /) -> Self:
            """
            A string of the desired User Data for the Droplet.
            """
            return self._set("user_data", value)

        def vcpus(self, value: Optional[float], /) -> Self:
            """
            The number of the instance's virtual CPUs
            """
            return self._set("vcpus", value)

        def volume_ids(self, value: Optional[List[str]], /) -> Self:
            """
            A list of the IDs of each block storage volume to be attached to the Droplet.
            """
            return self._set("volume_ids", value)

        def vpc_uuid(self, value: Optional[str], /) -> Self:
            """
            The ID of the VPC where the Droplet will be located.
            """
            return self._set("vpc_uuid", value)

    class BuilderContext(BuilderContextBase["AtProvider.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = AtProvider.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for AtProvider."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["AtProvider", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AtProvider.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    backups: Optional[bool] = None
    """
    Boolean controlling if backups are made. Defaults to
    false.
    """
    created_at: Annotated[Optional[str], Field(alias="createdAt")] = None
    disk: Optional[float] = None
    """
    The size of the instance's disk in GB
    """
    droplet_agent: Annotated[Optional[bool], Field(alias="dropletAgent")] = None
    """
    A boolean indicating whether to install the
    DigitalOcean agent used for providing access to the Droplet web console in
    the control panel. By default, the agent is installed on new Droplets but
    installation errors (i.e. OS not supported) are ignored. To prevent it from
    being installed, set to false. To make installation errors fatal, explicitly
    set it to true.
    """
    graceful_shutdown: Annotated[Optional[bool], Field(alias="gracefulShutdown")] = None
    """
    A boolean indicating whether the droplet
    should be gracefully shut down before it is deleted.
    """
    id: Optional[str] = None
    """
    The ID of the Droplet
    """
    image: Optional[str] = None
    """
    The Droplet image ID or slug. This could be either image ID or droplet snapshot ID.
    """
    ipv4_address: Annotated[Optional[str], Field(alias="ipv4Address")] = None
    """
    The IPv4 address
    """
    ipv4_address_private: Annotated[Optional[str], Field(alias="ipv4AddressPrivate")] = None
    """
    The private networking IPv4 address
    """
    ipv6: Optional[bool] = None
    """
    Boolean controlling if IPv6 is enabled. Defaults to false.
    Once enabled for a Droplet, IPv6 can not be disabled. When enabling IPv6 on
    an existing Droplet, additional OS-level configuration
    is required.
    """
    ipv6_address: Annotated[Optional[str], Field(alias="ipv6Address")] = None
    """
    The IPv6 address
    """
    locked: Optional[bool] = None
    """
    Is the Droplet locked
    """
    memory: Optional[float] = None
    monitoring: Optional[bool] = None
    """
    Boolean controlling whether monitoring agent is installed.
    Defaults to false. If set to true, you can configure monitor alert policies
    monitor alert resource
    """
    name: Optional[str] = None
    """
    The Droplet name.
    """
    price_hourly: Annotated[Optional[float], Field(alias="priceHourly")] = None
    """
    Droplet hourly price
    """
    price_monthly: Annotated[Optional[float], Field(alias="priceMonthly")] = None
    """
    Droplet monthly price
    """
    private_networking: Annotated[Optional[bool], Field(alias="privateNetworking")] = None
    """
    Deprecated Boolean controlling if private networking
    is enabled. This parameter has been deprecated. Use vpc_uuid instead to specify a VPC network for the Droplet. If no vpc_uuid is provided, the Droplet will be placed in your account's default VPC for the region.
    """
    region: Optional[str] = None
    """
    The region where the Droplet will be created.
    """
    resize_disk: Annotated[Optional[bool], Field(alias="resizeDisk")] = None
    """
    Boolean controlling whether to increase the disk
    size when resizing a Droplet. It defaults to true. When set to false,
    only the Droplet's RAM and CPU will be resized. Increasing a Droplet's disk
    size is a permanent change. Increasing only RAM and CPU is reversible.
    """
    size: Optional[str] = None
    """
    The unique slug that identifies the type of Droplet. You can find a list of available slugs on DigitalOcean API documentation.
    """
    ssh_keys: Annotated[Optional[List[str]], Field(alias="sshKeys")] = None
    """
    A list of SSH key IDs or fingerprints to enable in
    the format [12345, 123456]. To retrieve this info, use the
    DigitalOcean API
    or CLI (doctl compute ssh-key list). Once a Droplet is created keys can not
    be added or removed via this provider. Modifying this field will prompt you
    to destroy and recreate the Droplet.
    """
    status: Optional[str] = None
    """
    The status of the Droplet
    """
    tags: Optional[List[str]] = None
    """
    A list of the tags to be applied to this Droplet.
    """
    urn: Optional[str] = None
    """
    The uniform resource name of the Droplet
    """
    user_data: Annotated[Optional[str], Field(alias="userData")] = None
    """
    A string of the desired User Data for the Droplet.
    """
    vcpus: Optional[float] = None
    """
    The number of the instance's virtual CPUs
    """
    volume_ids: Annotated[Optional[List[str]], Field(alias="volumeIds")] = None
    """
    A list of the IDs of each block storage volume to be attached to the Droplet.
    """
    vpc_uuid: Annotated[Optional[str], Field(alias="vpcUuid")] = None
    """
    The ID of the VPC where the Droplet will be located.
    """


class Condition(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Condition"]:
            return Condition

        def build(self) -> "Condition":
            return Condition(**self._attrs)

        def last_transition_time(self, value: datetime, /) -> Self:
            """
            LastTransitionTime is the last time this condition transitioned from one
            status to another.
            """
            return self._set("last_transition_time", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            A Message containing details about this condition's last transition from
            one status to another, if any.
            """
            return self._set("message", value)

        def observed_generation(self, value: Optional[int], /) -> Self:
            """
            ObservedGeneration represents the .metadata.generation that the condition was set based upon.
            For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
            with respect to the current state of the instance.
            """
            return self._set("observed_generation", value)

        def reason(self, value: str, /) -> Self:
            """
            A Reason for this condition's last transition from one status to another.
            """
            return self._set("reason", value)

        def status(self, value: str, /) -> Self:
            """
            Status of this condition; is it currently True, False, or Unknown?
            """
            return self._set("status", value)

        def type(self, value: str, /) -> Self:
            """
            Type of this condition. At most one of each condition type may apply to
            a resource at any point in time.
            """
            return self._set("type", value)

    class BuilderContext(BuilderContextBase["Condition.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Condition.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Condition."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Condition", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Condition.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    last_transition_time: Annotated[datetime, Field(alias="lastTransitionTime")]
    """
    LastTransitionTime is the last time this condition transitioned from one
    status to another.
    """
    message: Optional[str] = None
    """
    A Message containing details about this condition's last transition from
    one status to another, if any.
    """
    observed_generation: Annotated[Optional[int], Field(alias="observedGeneration")] = None
    """
    ObservedGeneration represents the .metadata.generation that the condition was set based upon.
    For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
    with respect to the current state of the instance.
    """
    reason: str
    """
    A Reason for this condition's last transition from one status to another.
    """
    status: str
    """
    Status of this condition; is it currently True, False, or Unknown?
    """
    type: str
    """
    Type of this condition. At most one of each condition type may apply to
    a resource at any point in time.
    """


class DropletStatus(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["DropletStatus"]:
            return DropletStatus

        def build(self) -> "DropletStatus":
            return DropletStatus(**self._attrs)

        @overload
        def at_provider(
            self, value_or_callback: Optional[AtProvider], /
        ) -> "DropletStatus.Builder": ...

        @overload
        def at_provider(
            self,
            value_or_callback: Callable[[AtProvider.Builder], AtProvider.Builder | AtProvider],
            /,
        ) -> "DropletStatus.Builder": ...

        @overload
        def at_provider(self, value_or_callback: Never = ...) -> "AtProvider.BuilderContext": ...

        def at_provider(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = AtProvider.BuilderContext()
                context._parent_builder = self
                context._field_name = "at_provider"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(AtProvider.builder())
                if isinstance(output, AtProvider.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("at_provider", value)

        @overload
        def conditions(self, value_or_callback: List[Condition], /) -> "DropletStatus.Builder": ...

        @overload
        def conditions(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[Condition, Condition.Builder]],
                GenericListBuilder[Condition, Condition.Builder] | List[Condition],
            ],
            /,
        ) -> "DropletStatus.Builder": ...

        @overload
        def conditions(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[Condition.Builder]: ...

        def conditions(self, value_or_callback=None, /):
            """
            Conditions of the resource.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[Condition.Builder]()
                context._parent_builder = self
                context._field_name = "conditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Condition.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("conditions", value)

        def observed_generation(self, value: Optional[int], /) -> Self:
            """
            ObservedGeneration is the latest metadata.generation
            which resulted in either a ready state, or stalled due to error
            it can not recover from without human intervention.
            """
            return self._set("observed_generation", value)

    class BuilderContext(BuilderContextBase["DropletStatus.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = DropletStatus.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for DropletStatus."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["DropletStatus", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use DropletStatus.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    at_provider: Annotated[Optional[AtProvider], Field(alias="atProvider")] = None
    conditions: Optional[List[Condition]] = None
    """
    Conditions of the resource.
    """
    observed_generation: Annotated[Optional[int], Field(alias="observedGeneration")] = None
    """
    ObservedGeneration is the latest metadata.generation
    which resulted in either a ready state, or stalled due to error
    it can not recover from without human intervention.
    """


class Droplet(Resource):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Droplet"]:
            return Droplet

        def build(self) -> "Droplet":
            return Droplet(**self._attrs)

        def api_version(
            self,
            value: Optional[Literal["droplet.digitalocean.crossplane.io/v1alpha1"]],
            /,
        ) -> Self:
            """
            APIVersion defines the versioned schema of this representation of an object.
            Servers should convert recognized schemas to the latest internal value, and
            may reject unrecognized values.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            """
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["Droplet"]], /) -> Self:
            """
            Kind is a string value representing the REST resource this object represents.
            Servers may infer this from the endpoint the client submits requests to.
            Cannot be updated.
            In CamelCase.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            """
            return self._set("kind", value)

        @overload
        def metadata(self, value_or_callback: Optional[v1.ObjectMeta], /) -> "Droplet.Builder": ...

        @overload
        def metadata(
            self,
            value_or_callback: Callable[
                [v1.ObjectMeta.Builder], v1.ObjectMeta.Builder | v1.ObjectMeta
            ],
            /,
        ) -> "Droplet.Builder": ...

        @overload
        def metadata(self, value_or_callback: Never = ...) -> "v1.ObjectMeta.BuilderContext": ...

        def metadata(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = v1.ObjectMeta.BuilderContext()
                context._parent_builder = self
                context._field_name = "metadata"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(v1.ObjectMeta.builder())
                if isinstance(output, v1.ObjectMeta.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("metadata", value)

        @overload
        def spec(self, value_or_callback: DropletSpec, /) -> "Droplet.Builder": ...

        @overload
        def spec(
            self,
            value_or_callback: Callable[[DropletSpec.Builder], DropletSpec.Builder | DropletSpec],
            /,
        ) -> "Droplet.Builder": ...

        @overload
        def spec(self, value_or_callback: Never = ...) -> "DropletSpec.BuilderContext": ...

        def spec(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = DropletSpec.BuilderContext()
                context._parent_builder = self
                context._field_name = "spec"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(DropletSpec.builder())
                if isinstance(output, DropletSpec.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("spec", value)

        @overload
        def status(self, value_or_callback: Optional[DropletStatus], /) -> "Droplet.Builder": ...

        @overload
        def status(
            self,
            value_or_callback: Callable[
                [DropletStatus.Builder], DropletStatus.Builder | DropletStatus
            ],
            /,
        ) -> "Droplet.Builder": ...

        @overload
        def status(self, value_or_callback: Never = ...) -> "DropletStatus.BuilderContext": ...

        def status(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = DropletStatus.BuilderContext()
                context._parent_builder = self
                context._field_name = "status"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(DropletStatus.builder())
                if isinstance(output, DropletStatus.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("status", value)

    class BuilderContext(BuilderContextBase["Droplet.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Droplet.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Droplet."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Droplet", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Droplet.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[
        Optional[Literal["droplet.digitalocean.crossplane.io/v1alpha1"]],
        Field(alias="apiVersion"),
    ] = "droplet.digitalocean.crossplane.io/v1alpha1"
    """
    APIVersion defines the versioned schema of this representation of an object.
    Servers should convert recognized schemas to the latest internal value, and
    may reject unrecognized values.
    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[Literal["Droplet"]] = "Droplet"
    """
    Kind is a string value representing the REST resource this object represents.
    Servers may infer this from the endpoint the client submits requests to.
    Cannot be updated.
    In CamelCase.
    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[v1.ObjectMeta] = None
    spec: DropletSpec
    status: Optional[DropletStatus] = None
